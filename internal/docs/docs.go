// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "ROR",
            "url": "https://github.com/NorskHelsenett/ror"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Get health status for ROR-API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health status"
                ],
                "summary": "Health status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.HealthStatus"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/acl": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create acl",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Create acl",
                "parameters": [
                    {
                        "description": "Acl",
                        "name": "acl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aclmodels.AclV2ListItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/aclmodels.AclV2ListItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/acl/filter": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get acl by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Get acl by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-aclmodels_AclV2ListItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/acl/migrate": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Migrate acl",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Migrate acl",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/acl/scopes": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get acl scopes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Get acl scopes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aclmodels.Acl2Scope"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/acl/{aclId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get acl by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Get acl by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-aclmodels_AclV2ListItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update acl",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Update acl",
                "parameters": [
                    {
                        "type": "string",
                        "description": "aclId",
                        "name": "aclId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acl",
                        "name": "acl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aclmodels.AclV2ListItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/aclmodels.AclV2ListItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a acl by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Delete acl",
                "parameters": [
                    {
                        "type": "string",
                        "description": "aclId",
                        "name": "aclId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/acl/{scope}/{subject}/{access}": {
            "head": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Check acl by scope, subject and access method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "acl"
                ],
                "summary": "Check acl",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scope",
                        "name": "scope",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Subject",
                        "name": "subject",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "read,write,update or delete",
                        "name": "access",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/apikeys/apikeys": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a api key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Create api key",
                "parameters": [
                    {
                        "description": "Api key",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/apikeys/filter": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get apikeys by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api keys"
                ],
                "summary": "Get apikeys by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_ApiKey"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/apikeys/{apikeyId}": {
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a api key by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api keys"
                ],
                "summary": "Delete api key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "apikeyId",
                        "name": "apikeyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/cluster/heartbeat": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Registers a cluster heartbeat report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Register cluster heartbeat",
                "parameters": [
                    {
                        "description": "Heartbeat",
                        "name": "heartbeat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Cluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/cluster/{clusterid}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a cluster by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/cluster/{clusterid}/exists": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Check if clusterId exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "ClusterId exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/cluster/{clusterid}/metadata": {
            "patch": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update cluster metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Update metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Create a cluster",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Cluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/:clusterid/views/compliancereports": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "A structured presentation of compliance reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Compliance reports view",
                "parameters": [
                    {
                        "type": "string",
                        "description": "clusterid",
                        "name": "clusterid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReport"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/controlPlanesMetadata": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get cluster control planes metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "get control planes metadata",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.ClusterControlPlaneMetadata"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/filter": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get clusters by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get clusters by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/clusters/heartbeat": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Registers a cluster heartbeat report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Register cluster heartbeat",
                "parameters": [
                    {
                        "description": "Heartbeat",
                        "name": "heartbeat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Cluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/self": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/views/clusterlist": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Just a dummy view",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "This is a dummy view",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/views/compliancereports": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Shows a summary of trivy compliance reports per cluster categorized by amount failed or passed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get compliance reports summary per cluster",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReport"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/views/errorlist": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Just a dummy view",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "This is a dummy view",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/views/vulnerabilityreports": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Shows a summary of trivy vulnerability reports per cluster categorized by amount of critical/high/medium/low vulnerabilities.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get vulnerability reports summary per cluster",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsView"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/views/vulnerabilityreports/byid": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "A structured presentation of vulnerability reports by CVE ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Vulnerability reports view by CVE ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/views/vulnerabilityreports/byid/:cveid": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "A structured presentation of vulnerability reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Vulnerability reports view",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cveid",
                        "name": "cveid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/workspace/{workspaceId}/filter": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get clusters by workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get clusters by workspace",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    },
                    {
                        "type": "string",
                        "description": "workspaceId",
                        "name": "workspaceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Cluster"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a cluster by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/exists": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Check if clusterId exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "ClusterId exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/login": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a kubeconfig by clusterId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Get kubeconfig for clusterId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.KubeconfigCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.ClusterKubeconfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/metadata": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get cluster metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "get metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update cluster metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Update metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/views/applications": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Just a dummy view",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "This is a dummy view",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/views/ingresses": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Just a dummy view",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "This is a dummy view",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/views/nodes": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Just a dummy view",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "This is a dummy view",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/views/policyreports": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "A structured presentation of policyreports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Policy report view",
                "parameters": [
                    {
                        "enum": [
                            "Unknown",
                            "Cluster",
                            "Policy"
                        ],
                        "type": "string",
                        "description": "type",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterid}/views/vulnerabilityreports": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "A structured presentation of vulnerability reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "Vulnerability reports view",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/datacenters": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get datacenters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datacenters"
                ],
                "summary": "Get datacenters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Datacenter"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create datacenter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datacenters"
                ],
                "summary": "Create datacenter",
                "parameters": [
                    {
                        "description": "Datacenter",
                        "name": "datacenter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Datacenter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Datacenter"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/datacenters/id/{id}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get datacenter by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datacenters"
                ],
                "summary": "Get datacenter by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Datacenter"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/datacenters/{datacenterId}": {
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a datacenter by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datacenters"
                ],
                "summary": "Update a datacenter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "datacenterId",
                        "name": "datacenterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Datacenter",
                        "name": "datacenter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Datacenter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Datacenter"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/datacenters/{datacenterName}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get datacenter by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "datacenters"
                ],
                "summary": "Get datacenter by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "datacenterName",
                        "name": "datacenterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Datacenter"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/desired_versions": {
            "get": {
                "description": "Get all desired versions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "desired_version"
                ],
                "summary": "Get all desired versions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/apicontracts.DesiredVersion"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a desired version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "desired_version"
                ],
                "summary": "Create a desired version",
                "parameters": [
                    {
                        "description": "Add a desired version",
                        "name": "version",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.DesiredVersion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/desired_versions/{key}": {
            "get": {
                "description": "Get a desired version by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "desired_version"
                ],
                "summary": "Get a desired version by its name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.DesiredVersion"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a desired version by it's key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "desired_version"
                ],
                "summary": "Update a desired version by it's key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update the desired version",
                        "name": "version",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.DesiredVersion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a desired version by it's key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "desired_version"
                ],
                "summary": "Delete a desired version by it's key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/events/listen": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Listen to server sent events",
                "consumes": [
                    "text/event-stream"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Server sent events",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/info/version": {
            "get": {
                "description": "Get version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Get version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/metrics": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics by user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics by user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricsTotal"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Register metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Register metrics",
                "parameters": [
                    {
                        "description": "MetricsReport",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricsReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricsTotal"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/cluster/{clusterId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for clusterid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for clusterid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "clusterId",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/clusters": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for clusters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for clusters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/clusters/workspace/{workspaceId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for clusters by workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for clusters by workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "workspaceId",
                        "name": "workspaceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/custom/cluster/{property}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for clusters by a property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for clusters by a property",
                "parameters": [
                    {
                        "type": "string",
                        "description": "property",
                        "name": "property",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricsCustom"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/datacenter/{datacenterName}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for datacenter name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for datacenter name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "datacenterName",
                        "name": "datacenterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/datacenters": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for datacenters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for datacenters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/total": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricsTotal"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/workspace/{workspaceId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for workspace name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for workspace name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "workspaceId",
                        "name": "workspaceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/workspaces/datacenter/{datacenterId}/filter": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for workspaces by datacenter name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for workspaces by datacenter name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "datacenterId",
                        "name": "datacenterId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.MetricList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/metrics/workspaces/filter": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get metrics for workspaces",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics for workspaces",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Metric"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/operatorconfigs": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get all operator configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "operatorconfigs"
                ],
                "summary": "Get all operator configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.OperatorConfig"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a operator config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "operatorconfigs"
                ],
                "summary": "Create a operator config",
                "parameters": [
                    {
                        "description": "Add a operator config",
                        "name": "operatorconfig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.OperatorConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.OperatorConfig"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/operatorconfigs/:id": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a operator config by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "operatorconfigs"
                ],
                "summary": "Get a operator config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Get a operator config",
                        "name": "operatorconfig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.OperatorConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.OperatorConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a operator config by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "operatorconfigs"
                ],
                "summary": "Update a operator config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update operator config",
                        "name": "operatorconfig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.OperatorConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.OperatorConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a operator config by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "operatorconfigs"
                ],
                "summary": "Delete a operator config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/orders": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/orders/cluster": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Order a kubernetes cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Order a kubernetes cluster",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrderSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Order a kubernetes cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Order deletion a kubernetes cluster",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrderSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/orders/{uid}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order by uid",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceListClusterorders"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete a order by uid",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/prices": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get all prices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Get prices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Price"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/prices/:id": {
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a price by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Update a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update price",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Price"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Price"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a price by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Delete a price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/prices/provider/{providerName}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get prices by provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "prices"
                ],
                "summary": "Get prices by provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "providerName",
                        "name": "providerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Price"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create project",
                "parameters": [
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Project"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/projects/filter": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get projects by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get projects by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Project"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/projects/{projectId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get projects by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get projects by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Project"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a project by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "projectId",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_Project"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a project by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "projectId",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/projects/{projectId}/clusters": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get clusters by projectid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get clusters by projectid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "projectId",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.ClusterInfo"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/providers": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/providers.Provider"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/providers/{providerType}/configs/params": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get supported kubernetes versions by provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get kuberntes versions by provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "providerType",
                        "name": "providerType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/providers.Provider"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/providers/{providerType}/kubernetes/versions": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get supported kubernetes versions by provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get kuberntes versions by provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "providerType",
                        "name": "providerType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/providers.Provider"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/resource/uid/{uid}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a resource by uid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Get resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The uid of the resource",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ApiVersion",
                        "name": "apiversion",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind",
                        "name": "kind",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiresourcecontracts.ResourceNode"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/resources": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a list of resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Get resources",
                "parameters": [
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ApiVersion",
                        "name": "apiversion",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind",
                        "name": "kind",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiresourcecontracts.ResourceNode"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Registers a  resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Register  resource",
                "parameters": [
                    {
                        "description": "ResourceUpdate",
                        "name": "resourcereport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/resources/hashes": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a resource list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Get resource hash list",
                "parameters": [
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiresourcecontracts.HashList"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/resources/uid/{uid}": {
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Update resource by uid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ResourceUpdate",
                        "name": "resourcereport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Delete a resource by uid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "head": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a list of cluster resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Check cluster resource by uid",
                "parameters": [
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rulesets/cluster/{clusterId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "Get ruleset by cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesetsController"
                ],
                "summary": "Get ruleset by cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "clusterId",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/messages.RulesetModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rulesets/internal": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "Get the internal ruleset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesetsController"
                ],
                "summary": "Get internal ruleset",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/messages.RulesetModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rulesets/{rulesetId}/resources": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "Append a resource onto the ruleset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesetsController"
                ],
                "summary": "Add a resource onto the ruleset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "rulesetId",
                        "name": "rulesetId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/messages.RulesetResourceModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rulesets/{rulesetId}/resources/{resourceId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "Delete a resource and all of its events.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesetsController"
                ],
                "summary": "Delete a resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "rulesetId",
                        "name": "rulesetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resourceId",
                        "name": "resourceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rulesets/{rulesetId}/resources/{resourceId}/rules": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "Add a resource rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesetsController"
                ],
                "summary": "Add a resource rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "rulesetId",
                        "name": "rulesetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resourceId",
                        "name": "resourceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/messages.RulesetRuleModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rulesets/{rulesetId}/resources/{resourceId}/rules/{ruleId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "Add a resource rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rulesetsController"
                ],
                "summary": "Add a resource rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "rulesetId",
                        "name": "rulesetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resourceId",
                        "name": "resourceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ruleId",
                        "name": "ruleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/tasks": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get all tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Task"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a task",
                "parameters": [
                    {
                        "description": "Add a task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Task"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/tasks/:id": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a task by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Get a task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Task"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a task by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Task"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a task by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/users/self": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get user details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/users/self/apikeys": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a api key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create api key",
                "parameters": [
                    {
                        "description": "Api key",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/users/self/apikeys/filter": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get apikeys by filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get apikeys by filter",
                "parameters": [
                    {
                        "description": "Filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Filter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.PaginatedResult-apicontracts_ApiKey"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/users/self/apikeys/{apikeyId}": {
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a api key by id for user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete api key for user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "apikeyId",
                        "name": "apikeyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v1/workspaces": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get workspaces",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspaces"
                ],
                "summary": "Get workspaces",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apicontracts.Workspace"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/workspaces/id/{workspaceName}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a workspace its id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspaces"
                ],
                "summary": "Get a workspace by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Workspace"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/workspaces/{workspaceName}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a workspace its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspaces"
                ],
                "summary": "Get a workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.Workspace"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/workspaces/{workspaceName}/login": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a kubeconfig by workspace name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspaces"
                ],
                "summary": "Get kubeconfig for workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontracts.KubeconfigCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontracts.ClusterKubeconfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/resource/uid/{uid}": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a resource by uid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Get resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The uid of the resource",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ApiVersion",
                        "name": "apiversion",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind",
                        "name": "kind",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiresourcecontracts.ResourceNode"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/resources": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a list of resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Get resources",
                "parameters": [
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ApiVersion",
                        "name": "apiversion",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind",
                        "name": "kind",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiresourcecontracts.ResourceNode"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Registers a  resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Register  resource",
                "parameters": [
                    {
                        "description": "ResourceUpdate",
                        "name": "rorresource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rorresources.ResourceSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/resources/hashes": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a resource list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Get resource hash list",
                "parameters": [
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiresourcecontracts.HashList"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/resources/uid/{uid}": {
            "put": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Update a resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Update resource by uid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ResourceUpdate",
                        "name": "resourcereport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Delete a resource by uid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "head": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get a list of cluster resources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Check cluster resource by uid",
                "parameters": [
                    {
                        "enum": [
                            "",
                            "ror",
                            "cluster",
                            "project",
                            "datacenter",
                            "virtualmachine"
                        ],
                        "type": "string",
                        "description": "The kind of the owner, currently only support 'Cluster'",
                        "name": "ownerScope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name og the owner",
                        "name": "ownerSubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/self": {
            "get": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Get user details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get self",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontractsv2self.SelfData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v2/self/apikeys": {
            "post": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Create a api key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create api key",
                "parameters": [
                    {
                        "description": "Api key",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apicontractsv2self.CreateOrRenewApikeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apicontractsv2self.CreateOrRenewApikeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        },
        "/v2/self/apikeys/{apikeyId}": {
            "delete": {
                "security": [
                    {
                        "AccessToken": [],
                        "ApiKey": []
                    }
                ],
                "description": "Delete a api key by id for user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete api key for user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "apikeyId",
                        "name": "apikeyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rorerror.RorError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "aclmodels.Acl2Scope": {
            "type": "string",
            "enum": [
                "",
                "ror",
                "cluster",
                "project",
                "datacenter",
                "virtualmachine"
            ],
            "x-enum-comments": {
                "Acl2ScopeRor": "ROR",
                "Acl2ScopeUnknown": "unknown"
            },
            "x-enum-varnames": [
                "Acl2ScopeUnknown",
                "Acl2ScopeRor",
                "Acl2ScopeCluster",
                "Acl2ScopeProject",
                "Acl2ScopeDatacenter",
                "Acl2ScopeVirtualMachine"
            ]
        },
        "aclmodels.AclV2ListItem": {
            "type": "object",
            "required": [
                "access",
                "group",
                "scope",
                "subject"
            ],
            "properties": {
                "access": {
                    "description": "v2 access model for ror api",
                    "allOf": [
                        {
                            "$ref": "#/definitions/aclmodels.AclV2ListItemAccess"
                        }
                    ]
                },
                "created": {
                    "type": "string"
                },
                "group": {
                    "description": "The group which the acces is granted",
                    "type": "string",
                    "minLength": 1
                },
                "id": {
                    "description": "Id",
                    "type": "string"
                },
                "issuedBy": {
                    "type": "string"
                },
                "kubernetes": {
                    "description": "Accessv2   []map[AccessType]bool    ` + "`" + `json:\"accessv2\" validate:\"\"` + "`" + `                      // v2 access model for ror api",
                    "allOf": [
                        {
                            "$ref": "#/definitions/aclmodels.AclV2ListItemKubernetes"
                        }
                    ]
                },
                "scope": {
                    "description": "Type of object ['cluster','project']",
                    "minLength": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/aclmodels.Acl2Scope"
                        }
                    ]
                },
                "subject": {
                    "description": "The subject eg. clusterid, projectid (can be 'All')",
                    "type": "string",
                    "minLength": 1
                },
                "version": {
                    "description": "Acl Version, must be 2",
                    "type": "integer",
                    "default": 2
                }
            }
        },
        "aclmodels.AclV2ListItemAccess": {
            "type": "object",
            "properties": {
                "create": {
                    "description": "Write metadata of subject",
                    "type": "boolean"
                },
                "delete": {
                    "description": "Delete metadata of subject",
                    "type": "boolean"
                },
                "owner": {
                    "description": "Delete metadata of subject",
                    "type": "boolean"
                },
                "read": {
                    "description": "Read metadata of subject",
                    "type": "boolean"
                },
                "update": {
                    "description": "Update metadata of subject",
                    "type": "boolean"
                }
            }
        },
        "aclmodels.AclV2ListItemKubernetes": {
            "type": "object",
            "properties": {
                "logon": {
                    "description": "Logon to subject if 'cluster'",
                    "type": "boolean"
                }
            }
        },
        "apicontracts.AccessControlList": {
            "type": "object",
            "properties": {
                "accessGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "apicontracts.Agent": {
            "type": "object",
            "properties": {
                "sha": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ApiKey": {
            "type": "object",
            "required": [
                "displayName",
                "identifier",
                "type"
            ],
            "properties": {
                "created": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                },
                "expires": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "lastUsed": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "type": {
                    "minLength": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.ApiKeyType"
                        }
                    ]
                }
            }
        },
        "apicontracts.ApiKeyType": {
            "type": "string",
            "enum": [
                "",
                "Cluster",
                "User",
                "Service"
            ],
            "x-enum-varnames": [
                "ApiKeyTypeUnknown",
                "ApiKeyTypeCluster",
                "ApiKeyTypeUser",
                "ApiKeyTypeService"
            ]
        },
        "apicontracts.Billing": {
            "type": "object",
            "properties": {
                "workorder": {
                    "type": "string"
                }
            }
        },
        "apicontracts.Cluster": {
            "type": "object",
            "properties": {
                "acl": {
                    "$ref": "#/definitions/apicontracts.AccessControlList"
                },
                "clusterId": {
                    "type": "string"
                },
                "clusterIdOld": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/apicontracts.ClusterConfig"
                },
                "created": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "firstObserved": {
                    "type": "string"
                },
                "healthStatus": {
                    "$ref": "#/definitions/apicontracts.HealthStatus"
                },
                "id": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.Ingress"
                    }
                },
                "lastObserved": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/apicontracts.ClusterMetadata"
                },
                "metrics": {
                    "$ref": "#/definitions/apicontracts.Metrics"
                },
                "splunkIndex": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/apicontracts.ClusterStatus"
                },
                "topology": {
                    "$ref": "#/definitions/apicontracts.Topology"
                },
                "updated": {
                    "type": "string"
                },
                "versions": {
                    "$ref": "#/definitions/apicontracts.Versions"
                },
                "workspace": {
                    "$ref": "#/definitions/apicontracts.Workspace"
                },
                "workspaceId": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ClusterCondition": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/apicontracts.ConditionStatus"
                },
                "type": {
                    "$ref": "#/definitions/apicontracts.ConditionType"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ClusterConfig": {
            "type": "object",
            "properties": {
                "overrides": {
                    "type": "object",
                    "additionalProperties": true
                },
                "projectMetadata": {
                    "$ref": "#/definitions/apicontracts.ProjectMetadata"
                },
                "versions": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "apicontracts.ClusterControlPlaneMetadata": {
            "type": "object",
            "properties": {
                "clusterId": {},
                "clusterName": {},
                "controlPlaneEndpoint": {
                    "$ref": "#/definitions/apicontracts.ClusterControlPlaneMetadataIp"
                },
                "controlPlaneEndpointPort": {},
                "datacenter": {
                    "$ref": "#/definitions/apicontracts.ClusterControlPlaneMetadataDatacenter"
                },
                "egress": {
                    "$ref": "#/definitions/apicontracts.ClusterControlPlaneMetadataIp"
                },
                "environment": {},
                "projectName": {}
            }
        },
        "apicontracts.ClusterControlPlaneMetadataDatacenter": {
            "type": "object",
            "properties": {
                "apiEndpoint": {},
                "name": {},
                "provider": {}
            }
        },
        "apicontracts.ClusterControlPlaneMetadataIp": {
            "type": "object",
            "properties": {
                "ipv4": {},
                "ipv6": {}
            }
        },
        "apicontracts.ClusterInfo": {
            "type": "object",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/apicontracts.ClusterMetadata"
                }
            }
        },
        "apicontracts.ClusterKubeconfig": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "dataType": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ClusterMetadata": {
            "type": "object",
            "properties": {
                "billing": {
                    "$ref": "#/definitions/apicontracts.Billing"
                },
                "criticality": {
                    "$ref": "#/definitions/apicontracts.CriticalityLevel"
                },
                "description": {
                    "type": "string",
                    "minLength": 1
                },
                "project": {
                    "$ref": "#/definitions/apicontracts.Project"
                },
                "projectId": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.ProjectRole"
                    }
                },
                "sensitivity": {
                    "$ref": "#/definitions/apicontracts.SensitivityLevel"
                },
                "serviceTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "apicontracts.ClusterPhase": {
            "type": "string",
            "enum": [
                "Unknown",
                "Creating",
                "Ready",
                "Updating",
                "Deleting",
                "Deleted",
                "Error"
            ],
            "x-enum-varnames": [
                "ClusterPhaseUnkown",
                "ClusterPhaseCreating",
                "ClusterPhaseReady",
                "ClusterPhaseUpdating",
                "ClusterPhaseDeleting",
                "ClusterPhaseDeleted",
                "ClusterPhaseError"
            ]
        },
        "apicontracts.ClusterState": {
            "type": "string",
            "enum": [
                "Unknown",
                "Ready",
                "Warning",
                "Error"
            ],
            "x-enum-varnames": [
                "ClusterStateUnknown",
                "ClusterStateReady",
                "ClusterStateWarning",
                "ClusterStateError"
            ]
        },
        "apicontracts.ClusterStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.ClusterCondition"
                    }
                },
                "phase": {
                    "$ref": "#/definitions/apicontracts.ClusterPhase"
                },
                "state": {
                    "$ref": "#/definitions/apicontracts.ClusterState"
                }
            }
        },
        "apicontracts.ConditionStatus": {
            "type": "string",
            "enum": [
                "Unknown",
                "True",
                "False"
            ],
            "x-enum-varnames": [
                "ConditionStatusUnknown",
                "ConditionStatusTrue",
                "ConditionStatusFalse"
            ]
        },
        "apicontracts.ConditionType": {
            "type": "string",
            "enum": [
                "Unknown",
                "ClusterReady",
                "ToolingOk"
            ],
            "x-enum-varnames": [
                "ConditionTypeUnknown",
                "ConditionTypeClusterReady",
                "ConditionTypeToolingOk"
            ]
        },
        "apicontracts.ControlPlane": {
            "type": "object",
            "properties": {
                "metrics": {
                    "$ref": "#/definitions/apicontracts.Metrics"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.Node"
                    }
                }
            }
        },
        "apicontracts.CriticalityLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "CriticalityLevelUnknown",
                "CriticalityLevelOpen",
                "CriticalityLevelIntern",
                "CriticalityLevelShielded",
                "CriticalityLevelHighlyShielded"
            ]
        },
        "apicontracts.Datacenter": {
            "type": "object",
            "properties": {
                "apiEndpoint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/apicontracts.DatacenterLocation"
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/providers.ProviderType"
                }
            }
        },
        "apicontracts.DatacenterLocation": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "apicontracts.DesiredVersion": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "apicontracts.EndpointAddress": {
            "type": "object",
            "properties": {
                "nodename": {
                    "type": "string"
                },
                "podnamespace": {
                    "type": "string"
                }
            }
        },
        "apicontracts.FileNameAndData": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                },
                "filename": {
                    "description": "+kubebuilder:validation:MinLength=1",
                    "type": "string"
                }
            }
        },
        "apicontracts.Filter": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.FilterMetadata"
                    }
                },
                "globalFilter": {},
                "limit": {
                    "type": "integer"
                },
                "skip": {
                    "type": "integer"
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.SortMetadata"
                    }
                }
            }
        },
        "apicontracts.FilterMetadata": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "matchMode": {
                    "$ref": "#/definitions/apicontracts.MatchModeType"
                },
                "value": {}
            }
        },
        "apicontracts.GitConfig": {
            "type": "object",
            "properties": {
                "branch": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                },
                "projectId": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "integer"
                },
                "repository": {
                    "description": "+kubebuilder:validation:MinLength=1\n+kubebuilder:validation:Pattern=^[https|git].*",
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "apicontracts.Health": {
            "type": "integer",
            "enum": [
                0
            ],
            "x-enum-varnames": [
                "HealthUnknown"
            ]
        },
        "apicontracts.HealthStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "$ref": "#/definitions/apicontracts.Health"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.StatusMessage"
                    }
                }
            }
        },
        "apicontracts.Ingress": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string"
                },
                "health": {
                    "$ref": "#/definitions/apicontracts.Health"
                },
                "ingressrules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.IngressRule"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "apicontracts.IngressPath": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "service": {
                    "$ref": "#/definitions/apicontracts.Service"
                }
            }
        },
        "apicontracts.IngressRule": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.IngressPath"
                    }
                }
            }
        },
        "apicontracts.KeyValue": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "apicontracts.KubeconfigCredentials": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "apicontracts.MatchModeType": {
            "type": "string",
            "enum": [
                "unknown",
                "contains",
                "equals",
                "in"
            ],
            "x-enum-varnames": [
                "MatchModeUnknown",
                "MatchModeContains",
                "MatchModeEquals",
                "MatchModeIn"
            ]
        },
        "apicontracts.Metric": {
            "type": "object",
            "properties": {
                "clusterCount": {
                    "type": "integer"
                },
                "cpu": {
                    "type": "integer"
                },
                "cpuConsumed": {
                    "type": "integer"
                },
                "cpuPercentage": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "memoryConsumed": {
                    "type": "integer"
                },
                "memoryPercentage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodeCount": {
                    "type": "integer"
                },
                "nodePoolCount": {
                    "type": "integer"
                },
                "priceMonth": {
                    "type": "integer"
                },
                "priceYear": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.MetricItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/definitions/apicontracts.Metrics"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "apicontracts.MetricList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.MetricItem"
                    }
                }
            }
        },
        "apicontracts.Metrics": {
            "type": "object",
            "properties": {
                "clusterCount": {
                    "type": "integer"
                },
                "cpu": {
                    "type": "integer"
                },
                "cpuConsumed": {
                    "type": "integer"
                },
                "cpuPercentage": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                },
                "memoryConsumed": {
                    "type": "integer"
                },
                "memoryPercentage": {
                    "type": "integer"
                },
                "nodeCount": {
                    "type": "integer"
                },
                "nodePoolCount": {
                    "type": "integer"
                },
                "priceMonth": {
                    "type": "integer"
                },
                "priceYear": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.MetricsCustom": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.MetricsCustomItem"
                    }
                }
            }
        },
        "apicontracts.MetricsCustomItem": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.MetricsReport": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.NodeMetric"
                    }
                },
                "owner": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceOwnerReference"
                }
            }
        },
        "apicontracts.MetricsTotal": {
            "type": "object",
            "properties": {
                "clusterCount": {
                    "type": "integer"
                },
                "cpu": {
                    "type": "integer"
                },
                "cpuConsumed": {
                    "type": "integer"
                },
                "cpuPercentage": {
                    "type": "integer"
                },
                "datacenterCount": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                },
                "memoryConsumed": {
                    "type": "integer"
                },
                "memoryPercentage": {
                    "type": "integer"
                },
                "nodeCount": {
                    "type": "integer"
                },
                "nodePoolCount": {
                    "type": "integer"
                },
                "workspaceCount": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.NhnTooling": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "apicontracts.Node": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "containerRuntimeVersion": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "kernelVersion": {
                    "type": "string"
                },
                "kubeProxyVersion": {
                    "type": "string"
                },
                "kubeletVersion": {
                    "type": "string"
                },
                "machineClass": {
                    "type": "string"
                },
                "machineName": {
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/definitions/apicontracts.Metrics"
                },
                "name": {
                    "type": "string"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "osImage": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "apicontracts.NodeMetric": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "cpuallocated": {
                    "type": "integer"
                },
                "cpupercentage": {
                    "type": "number"
                },
                "memory": {
                    "type": "integer"
                },
                "memoryallocated": {
                    "type": "integer"
                },
                "memorypercentage": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "apicontracts.NodePool": {
            "type": "object",
            "properties": {
                "machineClass": {
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/definitions/apicontracts.Metrics"
                },
                "name": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.Node"
                    }
                }
            }
        },
        "apicontracts.OperatorConfig": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/apicontracts.OperatorSpec"
                }
            }
        },
        "apicontracts.OperatorSpec": {
            "type": "object",
            "properties": {
                "imagePostfix": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.OperatorTask"
                    }
                }
            }
        },
        "apicontracts.OperatorTask": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "runOnce": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "apicontracts.PaginatedResult-aclmodels_AclV2ListItem": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aclmodels.AclV2ListItem"
                    }
                },
                "dataCount": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.PaginatedResult-apicontracts_ApiKey": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.ApiKey"
                    }
                },
                "dataCount": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.PaginatedResult-apicontracts_Cluster": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.Cluster"
                    }
                },
                "dataCount": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.PaginatedResult-apicontracts_Metric": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.Metric"
                    }
                },
                "dataCount": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.PaginatedResult-apicontracts_Project": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.Project"
                    }
                },
                "dataCount": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.Price": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "from": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "machineClass": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "memoryBytes": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "provider": {
                    "$ref": "#/definitions/providers.ProviderType"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "apicontracts.Project": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectMetadata": {
                    "$ref": "#/definitions/apicontracts.ProjectMetadata"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ProjectContactInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "upn": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ProjectMetadata": {
            "type": "object",
            "properties": {
                "billing": {
                    "$ref": "#/definitions/apicontracts.Billing"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.ProjectRole"
                    }
                },
                "serviceTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "apicontracts.ProjectRole": {
            "type": "object",
            "properties": {
                "contactInfo": {
                    "$ref": "#/definitions/apicontracts.ProjectContactInfo"
                },
                "roleDefinition": {
                    "$ref": "#/definitions/apicontracts.ProjectRoleDefinition"
                }
            }
        },
        "apicontracts.ProjectRoleDefinition": {
            "type": "string",
            "enum": [
                "",
                "Owner",
                "Responsible"
            ],
            "x-enum-varnames": [
                "ProjectRoleUnknown",
                "ProjectRoleOwner",
                "ProjectRoleResponsible"
            ]
        },
        "apicontracts.SensitivityLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "SensitivityLevelUnknown",
                "SensitivityLevelNormal",
                "SensitivityLevelModerate",
                "SensitivityLevelHigh",
                "SensitivityLevelCritical"
            ]
        },
        "apicontracts.Service": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.EndpointAddress"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.ServicePort"
                    }
                },
                "selector": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apicontracts.ServicePort": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "nodeport": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "apicontracts.SortMetadata": {
            "type": "object",
            "properties": {
                "sortField": {
                    "type": "string"
                },
                "sortOrder": {
                    "type": "integer"
                }
            }
        },
        "apicontracts.StatusMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "apicontracts.Task": {
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/apicontracts.TaskSpec"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "apicontracts.TaskGitSource": {
            "type": "object",
            "properties": {
                "contentPath": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                },
                "gitConfig": {
                    "description": "+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.GitConfig"
                        }
                    ]
                },
                "type": {
                    "description": "+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.TaskSourceType"
                        }
                    ]
                }
            }
        },
        "apicontracts.TaskScripts": {
            "type": "object",
            "properties": {
                "fileNameAndData": {
                    "description": "+kubebuilder:validation:Required\n+kubebuilder:validation:MinItems=1",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.FileNameAndData"
                    }
                },
                "scriptDirectory": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "apicontracts.TaskSecret": {
            "type": "object",
            "properties": {
                "fileNameAndData": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.FileNameAndData"
                    }
                },
                "gitSource": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.TaskGitSource"
                        }
                    ]
                },
                "path": {
                    "description": "+kubebuilder:validation:MinLength=1",
                    "type": "string"
                },
                "vaultSource": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.TaskVaultSource"
                        }
                    ]
                }
            }
        },
        "apicontracts.TaskSourceType": {
            "type": "string",
            "enum": [
                "",
                "git",
                "vault"
            ],
            "x-enum-varnames": [
                "Unknown",
                "Git",
                "Vault"
            ]
        },
        "apicontracts.TaskSpec": {
            "type": "object",
            "required": [
                "imageName"
            ],
            "properties": {
                "backoffLimit": {
                    "description": "+kubebuilder:validation:Minimum=1\n+kubebuilder:validation:Maximum=10\n+kubebuilder:default=3",
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 1
                },
                "cmd": {
                    "description": "+optional",
                    "type": "string"
                },
                "envVars": {
                    "description": "+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apicontracts.KeyValue"
                    }
                },
                "imageName": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                },
                "scripts": {
                    "description": "+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.TaskScripts"
                        }
                    ]
                },
                "secret": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.TaskSecret"
                        }
                    ]
                },
                "timeoutInSeconds": {
                    "description": "+kubebuilder:validation:Minimum=30\n+kubebuilder:validation:Maximum=600\n+kubebuilder:default=180",
                    "type": "integer",
                    "maximum": 600,
                    "minimum": 30
                },
                "version": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "apicontracts.TaskVaultSource": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apicontracts.TaskSourceType"
                        }
                    ]
                },
                "vaultPath": {
                    "description": "+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "apicontracts.Topology": {
            "type": "object",
            "properties": {
                "controlPlane": {
                    "$ref": "#/definitions/apicontracts.ControlPlane"
                },
                "controlPlaneEndpoint": {
                    "type": "string"
                },
                "egressIp": {
                    "type": "string"
                },
                "nodePools": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/apicontracts.NodePool"
                    }
                }
            }
        },
        "apicontracts.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "apicontracts.Versions": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/apicontracts.Agent"
                },
                "kubernetes": {
                    "type": "string"
                },
                "nhnTooling": {
                    "$ref": "#/definitions/apicontracts.NhnTooling"
                }
            }
        },
        "apicontracts.Workspace": {
            "type": "object",
            "properties": {
                "datacenter": {
                    "$ref": "#/definitions/apicontracts.Datacenter"
                },
                "datacenterId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "apicontractsv2self.CreateOrRenewApikeyRequest": {
            "type": "object",
            "required": [
                "name",
                "ttl"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "ttl": {
                    "type": "integer"
                }
            }
        },
        "apicontractsv2self.CreateOrRenewApikeyResponse": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "apicontractsv2self.SelfData": {
            "type": "object",
            "properties": {
                "auth": {
                    "$ref": "#/definitions/identitymodels.AuthInfo"
                },
                "type": {
                    "$ref": "#/definitions/identitymodels.IdentityType"
                },
                "user": {
                    "$ref": "#/definitions/apicontractsv2self.SelfUser"
                }
            }
        },
        "apicontractsv2self.SelfUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.CriticalityLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "CriticalityLevelUnknown",
                "CriticalityLevelOpen",
                "CriticalityLevelIntern",
                "CriticalityLevelShielded",
                "CriticalityLevelHighlyShielded"
            ]
        },
        "apiresourcecontracts.EnvironmentType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "EnvironmentUnknown",
                "EnvironmentDevelopment",
                "EnvironmentTesting",
                "EnvironmentQA",
                "EnvironmentProduction"
            ]
        },
        "apiresourcecontracts.HashItem": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.HashList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.HashItem"
                    }
                }
            }
        },
        "apiresourcecontracts.ResourceAction": {
            "type": "string",
            "enum": [
                "Add",
                "Delete",
                "Update"
            ],
            "x-enum-varnames": [
                "K8sActionAdd",
                "K8sActionDelete",
                "K8sActionUpdate"
            ]
        },
        "apiresourcecontracts.ResourceActionType": {
            "type": "string",
            "enum": [
                "",
                "Create",
                "Update",
                "Delete"
            ],
            "x-enum-varnames": [
                "ResourceActionTypeUnknown",
                "ResourceActionTypeCreate",
                "ResourceActionTypeUpdate",
                "ResourceActionTypeDelete"
            ]
        },
        "apiresourcecontracts.ResourceClusterOrder": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceMetadata"
                },
                "spec": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrderSpec"
                },
                "status": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrderStatus"
                }
            }
        },
        "apiresourcecontracts.ResourceClusterOrderSpec": {
            "type": "object",
            "required": [
                "cluster",
                "nodePools",
                "orderBy",
                "orderType"
            ],
            "properties": {
                "cluster": {
                    "type": "string",
                    "minLength": 1
                },
                "criticality": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/apiresourcecontracts.CriticalityLevel"
                        }
                    ]
                },
                "environment": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/apiresourcecontracts.EnvironmentType"
                        }
                    ]
                },
                "highAvailability": {
                    "type": "boolean"
                },
                "k8sVersion": {
                    "type": "string"
                },
                "nodePools": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrderSpecNodePool"
                    }
                },
                "orderBy": {
                    "type": "string",
                    "minLength": 1
                },
                "orderType": {
                    "minLength": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/apiresourcecontracts.ResourceActionType"
                        }
                    ]
                },
                "ownerGroup": {
                    "type": "string",
                    "minLength": 1
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/providers.ProviderType"
                },
                "providerConfig": {
                    "type": "object",
                    "additionalProperties": true
                },
                "sensitivity": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/apiresourcecontracts.SensitivityLevel"
                        }
                    ]
                },
                "serviceTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "apiresourcecontracts.ResourceClusterOrderSpecNodePool": {
            "type": "object",
            "required": [
                "count",
                "machineClass",
                "name"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 1
                },
                "machineClass": {
                    "type": "string",
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "apiresourcecontracts.ResourceClusterOrderStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceKubernetesClusterStatusCondition"
                    }
                },
                "createdTime": {
                    "type": "string"
                },
                "lastObservedTime": {
                    "type": "string"
                },
                "phase": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrderStatusPhase"
                },
                "status": {
                    "type": "string"
                },
                "updatedTime": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceClusterOrderStatusPhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Creating",
                "Updating",
                "Deleting",
                "Completed",
                "Failed"
            ],
            "x-enum-varnames": [
                "ResourceClusterOrderStatusPhasePending",
                "ResourceClusterOrderStatusPhaseCreating",
                "ResourceClusterOrderStatusPhaseUpdating",
                "ResourceClusterOrderStatusPhaseDeleting",
                "ResourceClusterOrderStatusPhaseCompleted",
                "ResourceClusterOrderStatusPhaseFailed"
            ]
        },
        "apiresourcecontracts.ResourceKubernetesClusterStatusCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceListClusterorders": {
            "type": "object",
            "properties": {
                "clusterorders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceClusterOrder"
                    }
                },
                "owner": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceOwnerReference"
                }
            }
        },
        "apiresourcecontracts.ResourceMetadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "type": "string"
                },
                "generation": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceMetadataOwnerReference"
                    }
                },
                "resourceVersion": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceMetadataOwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceNode": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceMetadata"
                },
                "spec": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceNodeSpec"
                },
                "status": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceNodeStatus"
                }
            }
        },
        "apiresourcecontracts.ResourceNodeSpec": {
            "type": "object",
            "properties": {
                "podCIDR": {
                    "type": "string"
                },
                "podCIDRs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "providerID": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceNodeSpecTaints"
                    }
                }
            }
        },
        "apiresourcecontracts.ResourceNodeSpecTaints": {
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceNodeStatus": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceNodeStatusAddresses"
                    }
                },
                "capacity": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceNodeStatusCapacity"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceNodeStatusConditions"
                    }
                },
                "nodeInfo": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceNodeStatusNodeinfo"
                }
            }
        },
        "apiresourcecontracts.ResourceNodeStatusAddresses": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceNodeStatusCapacity": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "string"
                },
                "ephemeralStorage": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "pods": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceNodeStatusConditions": {
            "type": "object",
            "properties": {
                "lastHeartbeatTime": {
                    "type": "string"
                },
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceNodeStatusNodeinfo": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "bootID": {
                    "type": "string"
                },
                "containerRuntimeVersion": {
                    "type": "string"
                },
                "kernelVersion": {
                    "type": "string"
                },
                "kubeProxyVersion": {
                    "type": "string"
                },
                "kubeletVersion": {
                    "type": "string"
                },
                "machineID": {
                    "type": "string"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "osImage": {
                    "type": "string"
                },
                "systemUUID": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceOwnerReference": {
            "type": "object",
            "properties": {
                "scope": {
                    "description": "cluster, workspace,...",
                    "allOf": [
                        {
                            "$ref": "#/definitions/aclmodels.Acl2Scope"
                        }
                    ]
                },
                "subject": {
                    "description": "ror id eg clusterId or workspaceName",
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.ResourceUpdateModel": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceAction"
                },
                "apiVersion": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceOwnerReference"
                },
                "resource": {},
                "uid": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceVersion"
                }
            }
        },
        "apiresourcecontracts.ResourceVersion": {
            "type": "string",
            "enum": [
                "v1",
                "v2"
            ],
            "x-enum-varnames": [
                "ResourceVersionV1",
                "ResourceVersionV2"
            ]
        },
        "apiresourcecontracts.ResourceVulnerabilityReportReportVulnerability": {
            "type": "object",
            "properties": {
                "fixedVersion": {
                    "type": "string"
                },
                "installedVersion": {
                    "type": "string"
                },
                "primaryLink": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "severity": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "vulnerabilityID": {
                    "type": "string"
                }
            }
        },
        "apiresourcecontracts.SensitivityLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "SensitivityLevelUnknown",
                "SensitivityLevelNormal",
                "SensitivityLevelModerate",
                "SensitivityLevelHigh",
                "SensitivityLevelCritical"
            ]
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReport": {
            "type": "object",
            "properties": {
                "clusterid": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportMetadata"
                },
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportReport"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSummary"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportMetadata": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportReport": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "severity": {
                    "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSeverity"
                },
                "totalfail": {
                    "type": "integer"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSeverity": {
            "type": "string",
            "enum": [
                "CRITICAL",
                "HIGH",
                "MEDIUM",
                "LOW",
                "UNKOWN"
            ],
            "x-enum-varnames": [
                "CRITICAL",
                "HIGH",
                "MEDIUM",
                "LOW",
                "UNKNOWN"
            ]
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSummary": {
            "type": "object",
            "properties": {
                "failcount": {
                    "type": "integer"
                },
                "passcount": {
                    "type": "integer"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsArtifact": {
            "type": "object",
            "properties": {
                "repository": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsScanner": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsView": {
            "type": "object",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "criticalCount": {
                    "type": "integer"
                },
                "environment": {
                    "type": "string"
                },
                "highCount": {
                    "type": "integer"
                },
                "lowCount": {
                    "type": "integer"
                },
                "mediumCount": {
                    "type": "integer"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewNamespace"
                    }
                },
                "project": {
                    "$ref": "#/definitions/apicontracts.Project"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewNamespace": {
            "type": "object",
            "properties": {
                "criticalCount": {
                    "type": "integer"
                },
                "highCount": {
                    "type": "integer"
                },
                "lowCount": {
                    "type": "integer"
                },
                "mediumCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewReport"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewReport": {
            "type": "object",
            "properties": {
                "artifact": {
                    "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsArtifact"
                },
                "criticalCount": {
                    "type": "integer"
                },
                "highCount": {
                    "type": "integer"
                },
                "lowCount": {
                    "type": "integer"
                },
                "mediumCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner_ref": {
                    "$ref": "#/definitions/apiresourcecontracts.ResourceMetadataOwnerReference"
                },
                "scanner": {
                    "$ref": "#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsScanner"
                },
                "total": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                },
                "updateTimestamp": {
                    "type": "string"
                },
                "vulnerabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiresourcecontracts.ResourceVulnerabilityReportReportVulnerability"
                    }
                }
            }
        },
        "identitymodels.AuthInfo": {
            "type": "object",
            "properties": {
                "authProvider": {
                    "$ref": "#/definitions/identitymodels.IdentityProvider"
                },
                "authProviderId": {
                    "type": "string"
                },
                "expirationTime": {
                    "type": "string"
                }
            }
        },
        "identitymodels.IdentityProvider": {
            "type": "string",
            "enum": [
                "OIDC",
                "APIKEY"
            ],
            "x-enum-varnames": [
                "IdentityProviderOidc",
                "IdentityProviderApiKey"
            ]
        },
        "identitymodels.IdentityType": {
            "type": "string",
            "enum": [
                "User",
                "Cluster",
                "Service"
            ],
            "x-enum-varnames": [
                "IdentityTypeUser",
                "IdentityTypeCluster",
                "IdentityTypeService"
            ]
        },
        "intstr.IntOrString": {
            "type": "object",
            "properties": {
                "intVal": {
                    "type": "integer"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/intstr.Type"
                }
            }
        },
        "intstr.Type": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-comments": {
                "Int": "The IntOrString holds an int.",
                "String": "The IntOrString holds a string."
            },
            "x-enum-varnames": [
                "Int",
                "String"
            ]
        },
        "messages.RulesetIdentityModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/messages.RulesetIdentityType"
                }
            }
        },
        "messages.RulesetIdentityType": {
            "type": "string",
            "enum": [
                "unknown",
                "internal",
                "cluster"
            ],
            "x-enum-varnames": [
                "RulesetIdentityTypeUnknown",
                "RulesetIdentityTypeInternal",
                "RulesetIdentityTypeCluster"
            ]
        },
        "messages.RulesetLifetimeType": {
            "type": "string",
            "enum": [
                "unknown",
                "regular",
                "oneshot"
            ],
            "x-enum-varnames": [
                "RulesetLifetimeTypeUnknown",
                "RulesetLifetimeTypeRegular",
                "RulesetLifetimeTypeOneshot"
            ]
        },
        "messages.RulesetModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "identity": {
                    "$ref": "#/definitions/messages.RulesetIdentityModel"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/messages.RulesetResourceModel"
                    }
                }
            }
        },
        "messages.RulesetResourceModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ref": {
                    "type": "object",
                    "properties": {
                        "apiVersion": {
                            "description": "used for constructing a unique situation where uid is wildcard",
                            "type": "string"
                        },
                        "kind": {
                            "type": "string"
                        },
                        "name": {
                            "description": "only for presenting",
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "uid": {
                            "description": "if present, only this is used for lookup",
                            "type": "string"
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/messages.RulesetRuleModel"
                    }
                }
            }
        },
        "messages.RulesetRuleModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "lifetime": {
                    "$ref": "#/definitions/messages.RulesetLifetimeType"
                },
                "service": {
                    "$ref": "#/definitions/messages.RulesetServiceType"
                },
                "slack": {
                    "$ref": "#/definitions/messages.RulesetSlackModel"
                },
                "type": {
                    "$ref": "#/definitions/messages.RulesetRuleType"
                }
            }
        },
        "messages.RulesetRuleType": {
            "type": "string",
            "enum": [
                "unknown",
                "started",
                "created",
                "updated",
                "crashed",
                "deleted"
            ],
            "x-enum-varnames": [
                "RulesetRuleTypeUnknown",
                "RulesetRuleTypeStarted",
                "RulesetRuleTypeCreated",
                "RulesetRuleTypeUpdated",
                "RulesetRuleTypeCrashed",
                "RulesetRuleTypeDeleted"
            ]
        },
        "messages.RulesetServiceType": {
            "type": "string",
            "enum": [
                "unknown",
                "ignore",
                "slack",
                "sms"
            ],
            "x-enum-varnames": [
                "RulesetServiceTypeUnknown",
                "RulesetServiceTypeIgnore",
                "RulesetServiceTypeSlack",
                "RulesetServiceTypeSms"
            ]
        },
        "messages.RulesetSlackModel": {
            "type": "object",
            "properties": {
                "channelId": {
                    "type": "string"
                }
            }
        },
        "providers.Provider": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/providers.ProviderType"
                }
            }
        },
        "providers.ProviderType": {
            "type": "string",
            "enum": [
                "unknown",
                "tanzu",
                "aks",
                "k3d",
                "kind",
                "gke",
                "talos"
            ],
            "x-enum-varnames": [
                "ProviderTypeUnknown",
                "ProviderTypeTanzu",
                "ProviderTypeAks",
                "ProviderTypeK3d",
                "ProviderTypeKind",
                "ProviderTypeGke",
                "ProviderTypeTalos"
            ]
        },
        "rorerror.RorError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "rorresources.Resource": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "application": {
                    "$ref": "#/definitions/rortypes.ResourceApplication"
                },
                "appproject": {
                    "$ref": "#/definitions/rortypes.ResourceAppProject"
                },
                "certificate": {
                    "$ref": "#/definitions/rortypes.ResourceCertificate"
                },
                "clustercompliancereport": {
                    "$ref": "#/definitions/rortypes.ResourceClusterComplianceReport"
                },
                "clusterorder": {
                    "$ref": "#/definitions/rortypes.ResourceClusterOrder"
                },
                "clustervulnerabilityreport": {
                    "$ref": "#/definitions/rortypes.ResourceClusterVulnerabilityReport"
                },
                "configauditreport": {
                    "$ref": "#/definitions/rortypes.ResourceConfigAuditReport"
                },
                "configuration": {
                    "$ref": "#/definitions/rortypes.ResourceConfiguration"
                },
                "daemonset": {
                    "$ref": "#/definitions/rortypes.ResourceDaemonSet"
                },
                "deployment": {
                    "$ref": "#/definitions/rortypes.ResourceDeployment"
                },
                "endpoints": {
                    "$ref": "#/definitions/rortypes.ResourceEndpoints"
                },
                "exposedsecretreport": {
                    "$ref": "#/definitions/rortypes.ResourceExposedSecretReport"
                },
                "ingress": {
                    "$ref": "#/definitions/rortypes.ResourceIngress"
                },
                "ingressclass": {
                    "$ref": "#/definitions/rortypes.ResourceIngressClass"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "kubernetescluster": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesCluster"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "namespace": {
                    "$ref": "#/definitions/rortypes.ResourceNamespace"
                },
                "networkpolicy": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicy"
                },
                "node": {
                    "$ref": "#/definitions/rortypes.ResourceNode"
                },
                "persistentvolumeclaim": {
                    "$ref": "#/definitions/rortypes.ResourcePersistentVolumeClaim"
                },
                "pod": {
                    "$ref": "#/definitions/rortypes.ResourcePod"
                },
                "policyreport": {
                    "$ref": "#/definitions/rortypes.ResourcePolicyReport"
                },
                "project": {
                    "$ref": "#/definitions/rortypes.ResourceProject"
                },
                "rbacassessmentreport": {
                    "$ref": "#/definitions/rortypes.ResourceRbacAssessmentReport"
                },
                "replicaset": {
                    "$ref": "#/definitions/rortypes.ResourceReplicaSet"
                },
                "rormeta": {
                    "$ref": "#/definitions/rortypes.ResourceRorMeta"
                },
                "route": {
                    "$ref": "#/definitions/rortypes.ResourceRoute"
                },
                "service": {
                    "$ref": "#/definitions/rortypes.ResourceService"
                },
                "slackmessage": {
                    "$ref": "#/definitions/rortypes.ResourceSlackMessage"
                },
                "statefulset": {
                    "$ref": "#/definitions/rortypes.ResourceStatefulSet"
                },
                "storageclass": {
                    "$ref": "#/definitions/rortypes.ResourceStorageClass"
                },
                "tanzukubernetescluster": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesCluster"
                },
                "tanzukubernetesrelease": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesRelease"
                },
                "virtualmachine": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachine"
                },
                "virtualmachineclass": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineClass"
                },
                "virtualmachineclassbinding": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineClassBinding"
                },
                "vulnerabilityevent": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityEvent"
                },
                "vulnerabilityreport": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityReport"
                }
            }
        },
        "rorresources.ResourceSet": {
            "type": "object",
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rorresources.Resource"
                    }
                }
            }
        },
        "rortypes.AquaReportScanner": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.AquaReportSummary": {
            "type": "object",
            "properties": {
                "criticalCount": {
                    "type": "integer"
                },
                "highCount": {
                    "type": "integer"
                },
                "lowCount": {
                    "type": "integer"
                },
                "mediumCount": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "rortypes.CriticalityLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "CriticalityLevelUnknown",
                "CriticalityLevelOpen",
                "CriticalityLevelIntern",
                "CriticalityLevelShielded",
                "CriticalityLevelHighlyShielded"
            ]
        },
        "rortypes.EnvironmentType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "EnvironmentUnknown",
                "EnvironmentDevelopment",
                "EnvironmentTesting",
                "EnvironmentQA",
                "EnvironmentProduction"
            ]
        },
        "rortypes.ProviderType": {
            "type": "string",
            "enum": [
                "",
                "Tanzu",
                "Azure",
                "K3D"
            ],
            "x-enum-varnames": [
                "ProviderTypeUnknown",
                "ProviderTypeTanzu",
                "ProviderTypeAzure",
                "ProviderTypeK3d"
            ]
        },
        "rortypes.ResourceAction": {
            "type": "string",
            "enum": [
                "Add",
                "Delete",
                "Update"
            ],
            "x-enum-varnames": [
                "K8sActionAdd",
                "K8sActionDelete",
                "K8sActionUpdate"
            ]
        },
        "rortypes.ResourceAppProject": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceAppProjectSpec"
                }
            }
        },
        "rortypes.ResourceAppProjectSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceApplicationSpecDestination"
                    }
                },
                "sourceRepos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceApplication": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationStatus"
                }
            }
        },
        "rortypes.ResourceApplicationSpec": {
            "type": "object",
            "properties": {
                "destination": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpecDestination"
                },
                "project": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpecSource"
                },
                "syncPolicy": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpecSyncpolicy"
                }
            }
        },
        "rortypes.ResourceApplicationSpecDestination": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceApplicationSpecSource": {
            "type": "object",
            "properties": {
                "chart": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "repoURL": {
                    "type": "string"
                },
                "targetRevision": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceApplicationSpecSyncpolicy": {
            "type": "object",
            "properties": {
                "automated": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpecSyncpolicyAutomated"
                },
                "retry": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpecSyncpolicyRetry"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceApplicationSpecSyncpolicyAutomated": {
            "type": "object",
            "properties": {
                "allowEmpty": {
                    "type": "boolean"
                },
                "prune": {
                    "type": "boolean"
                },
                "selfHeal": {
                    "type": "boolean"
                }
            }
        },
        "rortypes.ResourceApplicationSpecSyncpolicyRetry": {
            "type": "object",
            "properties": {
                "backoff": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationSpecSyncpolicyRetryBackoff"
                },
                "limit": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceApplicationSpecSyncpolicyRetryBackoff": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string"
                },
                "factor": {
                    "type": "integer"
                },
                "maxDuration": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceApplicationStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationStatusHealth"
                },
                "operationState": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationStatusOperationstate"
                },
                "reconciledAt": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "sync": {
                    "$ref": "#/definitions/rortypes.ResourceApplicationStatusSync"
                }
            }
        },
        "rortypes.ResourceApplicationStatusHealth": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceApplicationStatusOperationstate": {
            "type": "object",
            "properties": {
                "finishedAt": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceApplicationStatusSync": {
            "type": "object",
            "properties": {
                "revision": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceCertificate": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceCertificateSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceCertificateStatus"
                }
            }
        },
        "rortypes.ResourceCertificateSpec": {
            "type": "object",
            "properties": {
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuerRef": {
                    "$ref": "#/definitions/rortypes.ResourceCertificateSpecIssuerref"
                },
                "secretName": {
                    "type": "string"
                },
                "usages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceCertificateSpecIssuerref": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceCertificateStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceCertificateStatusCondition"
                    }
                },
                "notAfter": {
                    "type": "string"
                },
                "notBefore": {
                    "type": "string"
                },
                "renewalTime": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceCertificateStatusCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "observedGeneration": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceClusterComplianceReport": {
            "type": "object"
        },
        "rortypes.ResourceClusterOrder": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceClusterOrderSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceClusterOrderStatus"
                }
            }
        },
        "rortypes.ResourceClusterOrderSpec": {
            "type": "object",
            "required": [
                "clusterName",
                "criticality",
                "environment",
                "nodePools",
                "orderBy",
                "ownerGroup",
                "projectId",
                "provider",
                "sensitivity"
            ],
            "properties": {
                "clusterName": {
                    "type": "string",
                    "minLength": 1
                },
                "criticality": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/rortypes.CriticalityLevel"
                        }
                    ]
                },
                "environment": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/rortypes.EnvironmentType"
                        }
                    ]
                },
                "highAvailability": {
                    "type": "boolean"
                },
                "nodePools": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceClusterOrderSpecNodePool"
                    }
                },
                "orderBy": {
                    "type": "string",
                    "minLength": 1
                },
                "ownerGroup": {
                    "type": "string",
                    "minLength": 1
                },
                "projectId": {
                    "type": "string",
                    "minLength": 1
                },
                "provider": {
                    "minLength": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/rortypes.ProviderType"
                        }
                    ]
                },
                "providerConfig": {
                    "type": "object",
                    "additionalProperties": true
                },
                "sensitivity": {
                    "maximum": 4,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/rortypes.SensitivityLevel"
                        }
                    ]
                },
                "serviceTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceClusterOrderSpecNodePool": {
            "type": "object",
            "required": [
                "count",
                "machineClass",
                "name"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 1
                },
                "machineClass": {
                    "type": "string",
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "rortypes.ResourceClusterOrderStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceKubernetesClusterStatusCondition"
                    }
                },
                "createdTime": {
                    "type": "string"
                },
                "lastObservedTime": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedTime": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceClusterVulnerabilityReport": {
            "type": "object",
            "properties": {
                "report": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/rortypes.ResourceClusterVulnerabilityReportReport"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/rortypes.ResourceClusterVulnerabilityReportSummary"
                }
            }
        },
        "rortypes.ResourceClusterVulnerabilityReportReport": {
            "type": "object",
            "properties": {
                "firstObserved": {
                    "type": "string"
                },
                "lastObserved": {
                    "type": "string"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceClusterVulnerabilityReportReportOwner"
                    }
                },
                "primaryLink": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "severity": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceClusterVulnerabilityReportReportStatus"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceClusterVulnerabilityReportReportOwner": {
            "type": "object",
            "properties": {
                "digest": {
                    "type": "string"
                },
                "fixedVersion": {
                    "type": "string"
                },
                "installedVersion": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "repository": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceClusterVulnerabilityReportReportStatus": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "reason": {
                    "$ref": "#/definitions/rortypes.VulnerabilityDismissalReason"
                },
                "riskAssessment": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.VulnerabilityStatus"
                },
                "until": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceClusterVulnerabilityReportSummary": {
            "type": "object",
            "properties": {
                "critical": {
                    "type": "integer"
                },
                "high": {
                    "type": "integer"
                },
                "low": {
                    "type": "integer"
                },
                "medium": {
                    "type": "integer"
                },
                "unknown": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceConfigAuditReport": {
            "type": "object",
            "properties": {
                "report": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityReportReport"
                }
            }
        },
        "rortypes.ResourceConfiguration": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceConfigurationSpec"
                }
            }
        },
        "rortypes.ResourceConfigurationSpec": {
            "type": "object",
            "properties": {
                "b64enc": {
                    "type": "boolean"
                },
                "data": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceDaemonSet": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceDaemonSetStatus"
                }
            }
        },
        "rortypes.ResourceDaemonSetStatus": {
            "type": "object",
            "properties": {
                "currentNumberScheduled": {
                    "type": "integer"
                },
                "currentReplicas": {
                    "type": "integer"
                },
                "desiredNumberScheduled": {
                    "type": "integer"
                },
                "numberAvailable": {
                    "type": "integer"
                },
                "numberReady": {
                    "type": "integer"
                },
                "numberUnavailable": {
                    "type": "integer"
                },
                "updatedNumberScheduled": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceDeployment": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceDeploymentStatus"
                }
            }
        },
        "rortypes.ResourceDeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "type": "integer"
                },
                "readyReplicas": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                },
                "updatedReplicas": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceEndpointSpecSubsets": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceEndpointSpecSubsetsAddresses"
                    }
                },
                "notReadyAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceEndpointSpecSubsetsNotReadyAddresses"
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceEndpointSpecSubsetsPorts"
                    }
                }
            }
        },
        "rortypes.ResourceEndpointSpecSubsetsAddresses": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                },
                "targetRef": {
                    "$ref": "#/definitions/rortypes.ResourceEndpointSpecSubsetsAddressesTargetRef"
                }
            }
        },
        "rortypes.ResourceEndpointSpecSubsetsAddressesTargetRef": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "fieldPath": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "resourceVersion": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceEndpointSpecSubsetsNotReadyAddresses": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "nodeName": {
                    "type": "string"
                },
                "targetRef": {
                    "$ref": "#/definitions/rortypes.ResourceEndpointSpecSubsetsNotReadyAddressesTargetRef"
                }
            }
        },
        "rortypes.ResourceEndpointSpecSubsetsNotReadyAddressesTargetRef": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "fieldPath": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "resourceVersion": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceEndpointSpecSubsetsPorts": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceEndpoints": {
            "type": "object",
            "properties": {
                "subsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceEndpointSpecSubsets"
                    }
                }
            }
        },
        "rortypes.ResourceExposedSecretReport": {
            "type": "object",
            "properties": {
                "report": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityReportReport"
                }
            }
        },
        "rortypes.ResourceIngress": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceIngressStatus"
                }
            }
        },
        "rortypes.ResourceIngressClass": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceIngressClassSpec"
                }
            }
        },
        "rortypes.ResourceIngressClassSpec": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "parameters": {
                    "$ref": "#/definitions/rortypes.ResourceIngressClassSpecParameters"
                }
            }
        },
        "rortypes.ResourceIngressClassSpecParameters": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceIngressSpec": {
            "type": "object",
            "properties": {
                "defaultBackend": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpecRulesHttpPathsBackend"
                },
                "ingressClassName": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceIngressSpecRules"
                    }
                },
                "tls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceIngressSpecTls"
                    }
                }
            }
        },
        "rortypes.ResourceIngressSpecBackendResource": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceIngressSpecBackendService": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "port": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpecBackendServicePort"
                }
            }
        },
        "rortypes.ResourceIngressSpecBackendServicePort": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceIngressSpecRules": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "type": "string"
                },
                "http": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpecRulesHttp"
                }
            }
        },
        "rortypes.ResourceIngressSpecRulesHttp": {
            "type": "object",
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceIngressSpecRulesHttpPaths"
                    }
                }
            }
        },
        "rortypes.ResourceIngressSpecRulesHttpPaths": {
            "type": "object",
            "properties": {
                "backend": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpecRulesHttpPathsBackend"
                },
                "path": {
                    "type": "string"
                },
                "pathType": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceIngressSpecRulesHttpPathsBackend": {
            "type": "object",
            "properties": {
                "resource": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpecBackendResource"
                },
                "service": {
                    "$ref": "#/definitions/rortypes.ResourceIngressSpecBackendService"
                }
            }
        },
        "rortypes.ResourceIngressSpecTls": {
            "type": "object",
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretName": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceIngressStatus": {
            "type": "object",
            "properties": {
                "loadBalancer": {
                    "$ref": "#/definitions/rortypes.ResourceIngressStatusLoadBalancer"
                }
            }
        },
        "rortypes.ResourceIngressStatusLoadBalancer": {
            "type": "object",
            "properties": {
                "ingress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceIngressStatusLoadBalancerIngress"
                    }
                }
            }
        },
        "rortypes.ResourceIngressStatusLoadBalancerIngress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesCluster": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterStatus"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpec": {
            "type": "object",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "clusterName": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecEndpoint"
                    }
                },
                "environment": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "providerSpec": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecProviderSpec"
                },
                "toolingConfig": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecToolingConfig"
                },
                "topology": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecTopology"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecEndpoint": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecProviderSpec": {
            "type": "object",
            "properties": {
                "azureSpec": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecProviderSpecAzureSpec"
                },
                "tanzuSpec": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecProviderSpecTanzuSpec"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecProviderSpecAzureSpec": {
            "type": "object",
            "properties": {
                "resourceGroup": {
                    "type": "string"
                },
                "subscriptionId": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecProviderSpecTanzuSpec": {
            "type": "object",
            "properties": {
                "namespace": {
                    "type": "string"
                },
                "supervisorClusterName": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecToolingConfig": {
            "type": "object",
            "properties": {
                "splunkIndex": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecTopology": {
            "type": "object",
            "properties": {
                "controlPlane": {
                    "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecTopologyControlPlane"
                },
                "workers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceKubernetesClusterSpecTopologyWorkers"
                    }
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecTopologyControlPlane": {
            "type": "object",
            "properties": {
                "machineClass": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterSpecTopologyWorkers": {
            "type": "object",
            "properties": {
                "machineClass": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceKubernetesClusterStatusCondition"
                    }
                },
                "createdTime": {
                    "type": "string"
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "lastObservedTime": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "providerStatus": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string"
                },
                "updatedTime": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceKubernetesClusterStatusCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNamespace": {
            "type": "object"
        },
        "rortypes.ResourceNetworkPolicy": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicySpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicyStatus"
                }
            }
        },
        "rortypes.ResourceNetworkPolicyCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "observedGeneration": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNetworkPolicyEgressRule": {
            "type": "object",
            "properties": {
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyPort"
                    }
                },
                "to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyPeer"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicyIngressRule": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyPeer"
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyPort"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicyIpBlock": {
            "type": "object",
            "properties": {
                "cidr": {
                    "type": "string"
                },
                "except": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicyPeer": {
            "type": "object",
            "properties": {
                "ipBlock": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicyIpBlock"
                },
                "namespaceSelector": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicySelector"
                },
                "podSelector": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicySelector"
                }
            }
        },
        "rortypes.ResourceNetworkPolicyPodSelector": {
            "type": "object",
            "properties": {
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicyPort": {
            "type": "object",
            "properties": {
                "endPort": {
                    "type": "integer"
                },
                "port": {
                    "$ref": "#/definitions/intstr.IntOrString"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNetworkPolicySelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicySelectorExpression"
                    }
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicySelectorExpression": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicySpec": {
            "type": "object",
            "properties": {
                "egress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyEgressRule"
                    }
                },
                "ingress": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyIngressRule"
                    }
                },
                "podSelector": {
                    "$ref": "#/definitions/rortypes.ResourceNetworkPolicyPodSelector"
                },
                "policyTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceNetworkPolicyStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNetworkPolicyCondition"
                    }
                }
            }
        },
        "rortypes.ResourceNode": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceNodeSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceNodeStatus"
                }
            }
        },
        "rortypes.ResourceNodeSpec": {
            "type": "object",
            "properties": {
                "podCIDR": {
                    "type": "string"
                },
                "podCIDRs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "providerID": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNodeSpecTaints"
                    }
                }
            }
        },
        "rortypes.ResourceNodeSpecTaints": {
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNodeStatus": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNodeStatusAddresses"
                    }
                },
                "capacity": {
                    "$ref": "#/definitions/rortypes.ResourceNodeStatusCapacity"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceNodeStatusConditions"
                    }
                },
                "nodeInfo": {
                    "$ref": "#/definitions/rortypes.ResourceNodeStatusNodeinfo"
                }
            }
        },
        "rortypes.ResourceNodeStatusAddresses": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNodeStatusCapacity": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "string"
                },
                "ephemeralStorage": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "pods": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNodeStatusConditions": {
            "type": "object",
            "properties": {
                "lastHeartbeatTime": {
                    "type": "string"
                },
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceNodeStatusNodeinfo": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "bootID": {
                    "type": "string"
                },
                "containerRuntimeVersion": {
                    "type": "string"
                },
                "kernelVersion": {
                    "type": "string"
                },
                "kubeProxyVersion": {
                    "type": "string"
                },
                "kubeletVersion": {
                    "type": "string"
                },
                "machineID": {
                    "type": "string"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "osImage": {
                    "type": "string"
                },
                "systemUUID": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePersistentVolumeClaim": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourcePersistentVolumeClaimSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourcePersistentVolumeClaimStatus"
                }
            }
        },
        "rortypes.ResourcePersistentVolumeClaimSpec": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resources": {
                    "$ref": "#/definitions/rortypes.ResourcePersistentVolumeClaimSpecResources"
                },
                "storageClassName": {
                    "type": "string"
                },
                "volumeMode": {
                    "type": "string"
                },
                "volumeName": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePersistentVolumeClaimSpecResources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourcePersistentVolumeClaimStatus": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "capacity": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "phase": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePod": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourcePodSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourcePodStatus"
                }
            }
        },
        "rortypes.ResourcePodSpec": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourcePodSpecContainers"
                    }
                },
                "nodeName": {
                    "type": "string"
                },
                "serviceAccountName": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePodSpecContainers": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourcePodSpecContainersPorts"
                    }
                }
            }
        },
        "rortypes.ResourcePodSpecContainersPorts": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePodStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePolicyReport": {
            "type": "object",
            "properties": {
                "lastReported": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourcePolicyReportResults"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/rortypes.ResourcePolicyReportSummary"
                }
            }
        },
        "rortypes.ResourcePolicyReportResults": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourcePolicyReportResultsResources"
                    }
                },
                "result": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePolicyReportResultsResources": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourcePolicyReportSummary": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "integer"
                },
                "fail": {
                    "type": "integer"
                },
                "pass": {
                    "type": "integer"
                },
                "skip": {
                    "type": "integer"
                },
                "warn": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceProject": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceProjectSpec"
                }
            }
        },
        "rortypes.ResourceProjectSpec": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "createdTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "projectName": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceProjectSpecRole"
                    }
                },
                "serviceTag": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedTime": {
                    "type": "string"
                },
                "workorder": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceProjectSpecRole": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "upn": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceRbacAssessmentReport": {
            "type": "object",
            "properties": {
                "report": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityReportReport"
                }
            }
        },
        "rortypes.ResourceReplicaSet": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceReplicaSetSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceReplicaSetStatus"
                }
            }
        },
        "rortypes.ResourceReplicaSetSpec": {
            "type": "object",
            "properties": {
                "replicas": {
                    "type": "integer"
                },
                "selector": {
                    "$ref": "#/definitions/rortypes.ResourceReplicaSetSpecSelector"
                }
            }
        },
        "rortypes.ResourceReplicaSetSpecSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceReplicaSetSpecSelectorMatchExpressions"
                    }
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceReplicaSetSpecSelectorMatchExpressions": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceReplicaSetStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "type": "integer"
                },
                "readyReplicas": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceRorMeta": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/rortypes.ResourceAction"
                },
                "hash": {
                    "type": "string"
                },
                "internal": {
                    "type": "boolean"
                },
                "lastReported": {
                    "type": "string"
                },
                "ownerref": {
                    "$ref": "#/definitions/rortypes.RorResourceOwnerReference"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceRoute": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceRouteSpec"
                }
            }
        },
        "rortypes.ResourceRouteMessageType": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceRouteReceiver": {
            "type": "object",
            "properties": {
                "slack": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceRouteSlackReceiver"
                    }
                }
            }
        },
        "rortypes.ResourceRouteSlackReceiver": {
            "type": "object",
            "properties": {
                "channelId": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceRouteSpec": {
            "type": "object",
            "properties": {
                "messageType": {
                    "$ref": "#/definitions/rortypes.ResourceRouteMessageType"
                },
                "receivers": {
                    "$ref": "#/definitions/rortypes.ResourceRouteReceiver"
                }
            }
        },
        "rortypes.ResourceService": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceServiceSpec"
                }
            }
        },
        "rortypes.ResourceServicePorts": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "targetPort": {
                    "$ref": "#/definitions/intstr.IntOrString"
                }
            }
        },
        "rortypes.ResourceServiceSpec": {
            "type": "object",
            "properties": {
                "clusterIP": {
                    "type": "string"
                },
                "clusterIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalName": {
                    "type": "string"
                },
                "externalTrafficPolicy": {
                    "type": "string"
                },
                "internalTrafficPolicy": {
                    "type": "string"
                },
                "ipFamilies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipFamilyPolicy": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceServicePorts"
                    }
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceSlackMessage": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceSlackMessageSpec"
                },
                "status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceSlackMessageStatus"
                    }
                }
            }
        },
        "rortypes.ResourceSlackMessageResult": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "SLACK_MESSAGE_OK",
                "SLACK_MESSAGE_ERROR",
                "SLACK_MESSAGE_UNKNOWN"
            ]
        },
        "rortypes.ResourceSlackMessageSpec": {
            "type": "object",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceSlackMessageStatus": {
            "type": "object",
            "properties": {
                "error": {},
                "result": {
                    "$ref": "#/definitions/rortypes.ResourceSlackMessageResult"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceStatefulSet": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceStatefulSetStatus"
                }
            }
        },
        "rortypes.ResourceStatefulSetStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "type": "integer"
                },
                "currentReplicas": {
                    "type": "integer"
                },
                "readyReplicas": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                },
                "updatedReplicas": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceStorageClass": {
            "type": "object",
            "properties": {
                "allowVolumeExpansion": {
                    "type": "boolean"
                },
                "provisioner": {
                    "type": "string"
                },
                "reclaimPolicy": {
                    "type": "string"
                },
                "volumeBindingMode": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanuzKuberntesClusterSpec": {
            "type": "object",
            "properties": {
                "distribution": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecDistribution"
                },
                "settings": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettings"
                },
                "topology": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopology"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesCluster": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceTanuzKuberntesClusterSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterStatus"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecDistribution": {
            "type": "object",
            "properties": {
                "fullVersion": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettings": {
            "type": "object",
            "properties": {
                "network": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetwork"
                },
                "storage": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsStorage"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetwork": {
            "type": "object",
            "properties": {
                "cni": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkCni"
                },
                "pods": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkPods"
                },
                "proxy": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkProxy"
                },
                "serviceDomain": {
                    "type": "string"
                },
                "services": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkServices"
                },
                "trust": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrust"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkCni": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkPods": {
            "type": "object",
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkProxy": {
            "type": "object",
            "properties": {
                "httpProxy": {
                    "type": "string"
                },
                "httpsProxy": {
                    "type": "string"
                },
                "noProxy": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkServices": {
            "type": "object",
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrust": {
            "type": "object",
            "properties": {
                "additionalTrustedCAs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrustAdditionalTrustedCA"
                    }
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrustAdditionalTrustedCA": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecSettingsStorage": {
            "type": "object",
            "properties": {
                "classes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "defaultClass": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopology": {
            "type": "object",
            "properties": {
                "controlPlane": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlane"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePools"
                    }
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlane": {
            "type": "object",
            "properties": {
                "nodeDrainTimeout": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "storageClass": {
                    "type": "string"
                },
                "tkr": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkr"
                },
                "vmClass": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkr": {
            "type": "object",
            "properties": {
                "reference": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkrReference"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkrReference": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "description": "ResourceVersion string ` + "`" + `json:\"resourceVersion\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePools": {
            "type": "object",
            "properties": {
                "failureDomain": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nodeDrainTimeout": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "storageClass": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTaints"
                    }
                },
                "tkr": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkr"
                },
                "vmClass": {
                    "type": "string"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsVolumes"
                    }
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTaints": {
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "timeAdded": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkr": {
            "type": "object",
            "properties": {
                "reference": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkrReference"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkrReference": {
            "type": "object",
            "properties": {
                "fieldPath": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "description": "ResourceVersion string ` + "`" + `json:\"resourceVersion\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsVolumes": {
            "type": "object",
            "properties": {
                "capasity": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "storageClass": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterStatus": {
            "type": "object",
            "properties": {
                "apiEndpoints": {
                    "description": "Addons []ResourceTanzuKubernetesClusterStatusAddons ` + "`" + `json:\"addons\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterStatusAPIEndpoints"
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesClusterStatusConditions"
                    }
                },
                "phase": {
                    "type": "string"
                },
                "totalWorkerReplicas": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterStatusAPIEndpoints": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesClusterStatusConditions": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesRelease": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesReleaseSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesReleaseStatus"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesReleaseSpec": {
            "type": "object",
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesReleaseSpecImage"
                    }
                },
                "kubernetesVersion": {
                    "type": "string"
                },
                "nodeImageRef": {
                    "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesReleaseSpecNodeImageRef"
                },
                "repository": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesReleaseSpecImage": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesReleaseSpecNodeImageRef": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "fieldPath": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "description": "ResourceVersion string ` + "`" + `json:\"resourceVersion\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesReleaseStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceTanzuKubernetesReleaseStatusCondition"
                    }
                }
            }
        },
        "rortypes.ResourceTanzuKubernetesReleaseStatusCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachine": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineSpec"
                },
                "status": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineStatus"
                }
            }
        },
        "rortypes.ResourceVirtualMachineClass": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineClassSpec"
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "rortypes.ResourceVirtualMachineClassBinding": {
            "type": "object",
            "properties": {
                "classRef": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineClassBindingClassRef"
                }
            }
        },
        "rortypes.ResourceVirtualMachineClassBindingClassRef": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineClassSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "hardware": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineClassSpecHardware"
                }
            }
        },
        "rortypes.ResourceVirtualMachineClassSpecHardware": {
            "type": "object",
            "properties": {
                "cpus": {
                    "type": "integer"
                },
                "instanceStorage": {
                    "description": "Devices ResourceVirtualMachineClassSpecHardwareDevice ` + "`" + `json:\"devices\"` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/rortypes.ResourceVirtualMachineClassSpecHardwareInstanceStorage"
                        }
                    ]
                }
            }
        },
        "rortypes.ResourceVirtualMachineClassSpecHardwareInstanceStorage": {
            "type": "object",
            "properties": {
                "storageClass": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineCpuSpec": {
            "type": "object",
            "properties": {
                "coresPerSocket": {
                    "description": "cores per socket",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "sockets": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceVirtualMachineCpuStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "unit": {
                    "description": "describes what unit the usage is given in",
                    "type": "string"
                },
                "usage": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineDiskSpec": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeBytes": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineDiskStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "usageBytes": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineMemorySpec": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "sizeBytes": {
                    "type": "integer"
                }
            }
        },
        "rortypes.ResourceVirtualMachineMemoryStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "unit": {
                    "description": "describes what unit the usage is given in",
                    "type": "string"
                },
                "usage": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineNetworkSpec": {
            "type": "object",
            "properties": {
                "dns": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipv4": {
                    "type": "string"
                },
                "ipv6": {
                    "type": "string"
                },
                "mask": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineNetworkStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineOperatingSystemSpec": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineOperatingSystemStatus": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "hostName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "powerState": {
                    "type": "string"
                },
                "toolVersion": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVirtualMachineSpec": {
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineCpuSpec"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceVirtualMachineDiskSpec"
                    }
                },
                "memory": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineMemorySpec"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceVirtualMachineNetworkSpec"
                    }
                },
                "operatingSystem": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineOperatingSystemSpec"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceVirtualMachineTagSpec"
                    }
                }
            }
        },
        "rortypes.ResourceVirtualMachineStatus": {
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineCpuStatus"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceVirtualMachineDiskStatus"
                    }
                },
                "memory": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineMemoryStatus"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceVirtualMachineNetworkStatus"
                    }
                },
                "operatingSystem": {
                    "$ref": "#/definitions/rortypes.ResourceVirtualMachineOperatingSystemStatus"
                }
            }
        },
        "rortypes.ResourceVirtualMachineTagSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVulnerabilityEvent": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityEventSpec"
                }
            }
        },
        "rortypes.ResourceVulnerabilityEventSpec": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/rortypes.RorResourceOwnerReference"
                }
            }
        },
        "rortypes.ResourceVulnerabilityReport": {
            "type": "object",
            "properties": {
                "report": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityReportReport"
                }
            }
        },
        "rortypes.ResourceVulnerabilityReportReport": {
            "type": "object",
            "properties": {
                "artifact": {
                    "$ref": "#/definitions/rortypes.ResourceVulnerabilityReportReportArtifact"
                },
                "scanner": {
                    "$ref": "#/definitions/rortypes.AquaReportScanner"
                },
                "summary": {
                    "$ref": "#/definitions/rortypes.AquaReportSummary"
                },
                "updateTimestamp": {
                    "type": "string"
                },
                "vulnerabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rortypes.ResourceVulnerabilityReportReportVulnerability"
                    }
                }
            }
        },
        "rortypes.ResourceVulnerabilityReportReportArtifact": {
            "type": "object",
            "properties": {
                "digest": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "rortypes.ResourceVulnerabilityReportReportVulnerability": {
            "type": "object",
            "properties": {
                "fixedVersion": {
                    "type": "string"
                },
                "installedVersion": {
                    "type": "string"
                },
                "primaryLink": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "severity": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "vulnerabilityID": {
                    "type": "string"
                }
            }
        },
        "rortypes.RorResourceOwnerReference": {
            "type": "object",
            "properties": {
                "scope": {
                    "description": "cluster, workspace,...",
                    "allOf": [
                        {
                            "$ref": "#/definitions/aclmodels.Acl2Scope"
                        }
                    ]
                },
                "subject": {
                    "description": "ror id eg clusterId or workspaceName",
                    "type": "string"
                }
            }
        },
        "rortypes.SensitivityLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "SensitivityLevelUnknown",
                "SensitivityLevelNormal",
                "SensitivityLevelModerate",
                "SensitivityLevelHigh",
                "SensitivityLevelCritical"
            ]
        },
        "rortypes.VulnerabilityDismissalReason": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "ACCEPTABLE_RISK",
                "FALSE_POSITIVE",
                "NOT_APPLICABLE"
            ]
        },
        "rortypes.VulnerabilityStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "NOT_ASSESSED",
                "NEEDS_TRIAGE",
                "CONFIRMED",
                "DISMISSED"
            ]
        },
        "v1.FieldsV1": {
            "type": "object"
        },
        "v1.ManagedFieldsEntry": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FieldsV1"
                        }
                    ]
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ManagedFieldsOperationType"
                        }
                    ]
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsOperationType": {
            "type": "string",
            "enum": [
                "Apply",
                "Update"
            ],
            "x-enum-varnames": [
                "ManagedFieldsOperationApply",
                "ManagedFieldsOperationUpdate"
            ]
        },
        "v1.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge\n+listType=set",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "type": "integer"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ManagedFieldsEntry"
                    }
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n+listType=map\n+listMapKey=uid",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "AccessToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "ApiKey": {
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger ROR-API",
	Description:      "ROR-API, need any help? Go to channel #drift-sdi-devops in norskhelsenett.slack.com slack workspace",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
