basePath: /
definitions:
  aclmodels.Acl2Scope:
    enum:
    - UNKNOWN
    - ror
    - cluster
    - project
    - datacenter
    - virtualmachine
    type: string
    x-enum-comments:
      Acl2ScopeRor: ROR
      Acl2ScopeUnknown: unknown
    x-enum-varnames:
    - Acl2ScopeUnknown
    - Acl2ScopeRor
    - Acl2ScopeCluster
    - Acl2ScopeProject
    - Acl2ScopeDatacenter
    - Acl2ScopeVirtualMachine
  aclmodels.AclV2ListItem:
    properties:
      access:
        allOf:
        - $ref: '#/definitions/aclmodels.AclV2ListItemAccess'
        description: v2 access model for ror api
      created:
        type: string
      group:
        description: The group which the acces is granted
        minLength: 1
        type: string
      id:
        description: Id
        type: string
      issuedBy:
        type: string
      kubernetes:
        allOf:
        - $ref: '#/definitions/aclmodels.AclV2ListItemKubernetes'
        description: Accessv2   []map[AccessType]bool    `json:"accessv2" validate:""`                      //
          v2 access model for ror api
      scope:
        allOf:
        - $ref: '#/definitions/aclmodels.Acl2Scope'
        description: Type of object ['cluster','project']
        minLength: 1
      subject:
        description: The subject eg. clusterid, projectid (can be 'All')
        minLength: 1
        type: string
      version:
        default: 2
        description: Acl Version, must be 2
        type: integer
    required:
    - access
    - group
    - scope
    - subject
    type: object
  aclmodels.AclV2ListItemAccess:
    properties:
      create:
        description: Write metadata of subject
        type: boolean
      delete:
        description: Delete metadata of subject
        type: boolean
      owner:
        description: Delete metadata of subject
        type: boolean
      read:
        description: Read metadata of subject
        type: boolean
      update:
        description: Update metadata of subject
        type: boolean
    type: object
  aclmodels.AclV2ListItemKubernetes:
    properties:
      logon:
        description: Logon to subject if 'cluster'
        type: boolean
    type: object
  apicontracts.AccessControlList:
    properties:
      accessGroups:
        items:
          type: string
        type: array
    type: object
  apicontracts.Agent:
    properties:
      sha:
        type: string
      version:
        type: string
    type: object
  apicontracts.ApiKey:
    properties:
      created:
        type: string
      displayName:
        maxLength: 20
        minLength: 3
        type: string
      expires:
        type: string
      hash:
        type: string
      id:
        type: string
      identifier:
        maxLength: 100
        minLength: 1
        type: string
      lastUsed:
        type: string
      readOnly:
        type: boolean
      type:
        allOf:
        - $ref: '#/definitions/apicontracts.ApiKeyType'
        minLength: 1
    required:
    - displayName
    - identifier
    - type
    type: object
  apicontracts.ApiKeyType:
    enum:
    - ""
    - Cluster
    - User
    - Service
    type: string
    x-enum-varnames:
    - ApiKeyTypeUnknown
    - ApiKeyTypeCluster
    - ApiKeyTypeUser
    - ApiKeyTypeService
  apicontracts.Billing:
    properties:
      workorder:
        type: string
    type: object
  apicontracts.Cluster:
    properties:
      acl:
        $ref: '#/definitions/apicontracts.AccessControlList'
      clusterId:
        type: string
      clusterIdOld:
        type: string
      clusterName:
        type: string
      config:
        $ref: '#/definitions/apicontracts.ClusterConfig'
      created:
        type: string
      createdBy:
        type: string
      environment:
        type: string
      firstObserved:
        type: string
      healthStatus:
        $ref: '#/definitions/apicontracts.HealthStatus'
      id:
        type: string
      identifier:
        type: string
      ingresses:
        items:
          $ref: '#/definitions/apicontracts.Ingress'
        type: array
      lastObserved:
        type: string
      metadata:
        $ref: '#/definitions/apicontracts.ClusterMetadata'
      metrics:
        $ref: '#/definitions/apicontracts.Metrics'
      splunkIndex:
        type: string
      status:
        $ref: '#/definitions/apicontracts.ClusterStatus'
      topology:
        $ref: '#/definitions/apicontracts.Topology'
      updated:
        type: string
      versions:
        $ref: '#/definitions/apicontracts.Versions'
      workspace:
        $ref: '#/definitions/apicontracts.Workspace'
      workspaceId:
        type: string
    type: object
  apicontracts.ClusterCondition:
    properties:
      created:
        type: string
      message:
        type: string
      status:
        $ref: '#/definitions/apicontracts.ConditionStatus'
      type:
        $ref: '#/definitions/apicontracts.ConditionType'
      updated:
        type: string
    type: object
  apicontracts.ClusterConfig:
    properties:
      overrides:
        additionalProperties: true
        type: object
      projectMetadata:
        $ref: '#/definitions/apicontracts.ProjectMetadata'
      versions:
        additionalProperties: true
        type: object
    type: object
  apicontracts.ClusterControlPlaneMetadata:
    properties:
      clusterId: {}
      clusterName: {}
      controlPlaneEndpoint:
        $ref: '#/definitions/apicontracts.ClusterControlPlaneMetadataIp'
      controlPlaneEndpointPort: {}
      datacenter:
        $ref: '#/definitions/apicontracts.ClusterControlPlaneMetadataDatacenter'
      egress:
        $ref: '#/definitions/apicontracts.ClusterControlPlaneMetadataIp'
      environment: {}
      projectName: {}
    type: object
  apicontracts.ClusterControlPlaneMetadataDatacenter:
    properties:
      apiEndpoint: {}
      name: {}
      provider: {}
    type: object
  apicontracts.ClusterControlPlaneMetadataIp:
    properties:
      ipv4: {}
      ipv6: {}
    type: object
  apicontracts.ClusterInfo:
    properties:
      clusterId:
        type: string
      clusterName:
        type: string
      environment:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/apicontracts.ClusterMetadata'
    type: object
  apicontracts.ClusterKubeconfig:
    properties:
      data:
        type: string
      dataType:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  apicontracts.ClusterMetadata:
    properties:
      billing:
        $ref: '#/definitions/apicontracts.Billing'
      criticality:
        $ref: '#/definitions/apicontracts.CriticalityLevel'
      description:
        minLength: 1
        type: string
      project:
        $ref: '#/definitions/apicontracts.Project'
      projectId:
        type: string
      roles:
        items:
          $ref: '#/definitions/apicontracts.ProjectRole'
        type: array
      sensitivity:
        $ref: '#/definitions/apicontracts.SensitivityLevel'
      serviceId:
        type: string
      serviceTags:
        additionalProperties:
          type: string
        type: object
    type: object
  apicontracts.ClusterPhase:
    enum:
    - Unknown
    - Creating
    - Ready
    - Updating
    - Deleting
    - Deleted
    - Error
    type: string
    x-enum-varnames:
    - ClusterPhaseUnkown
    - ClusterPhaseCreating
    - ClusterPhaseReady
    - ClusterPhaseUpdating
    - ClusterPhaseDeleting
    - ClusterPhaseDeleted
    - ClusterPhaseError
  apicontracts.ClusterState:
    enum:
    - Unknown
    - Ready
    - Warning
    - Error
    type: string
    x-enum-varnames:
    - ClusterStateUnknown
    - ClusterStateReady
    - ClusterStateWarning
    - ClusterStateError
  apicontracts.ClusterStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/apicontracts.ClusterCondition'
        type: array
      phase:
        $ref: '#/definitions/apicontracts.ClusterPhase'
      state:
        $ref: '#/definitions/apicontracts.ClusterState'
    type: object
  apicontracts.ConditionStatus:
    enum:
    - Unknown
    - "True"
    - "False"
    type: string
    x-enum-varnames:
    - ConditionStatusUnknown
    - ConditionStatusTrue
    - ConditionStatusFalse
  apicontracts.ConditionType:
    enum:
    - Unknown
    - ClusterReady
    - ToolingOk
    type: string
    x-enum-varnames:
    - ConditionTypeUnknown
    - ConditionTypeClusterReady
    - ConditionTypeToolingOk
  apicontracts.ControlPlane:
    properties:
      metrics:
        $ref: '#/definitions/apicontracts.Metrics'
      nodes:
        items:
          $ref: '#/definitions/apicontracts.Node'
        type: array
    type: object
  apicontracts.CriticalityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - CriticalityLevelUnknown
    - CriticalityLevelOpen
    - CriticalityLevelIntern
    - CriticalityLevelShielded
    - CriticalityLevelHighlyShielded
  apicontracts.Datacenter:
    properties:
      apiEndpoint:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/apicontracts.DatacenterLocation'
      name:
        type: string
      provider:
        $ref: '#/definitions/providermodels.ProviderType'
    type: object
  apicontracts.DatacenterLocation:
    properties:
      country:
        type: string
      id:
        type: string
      region:
        type: string
    type: object
  apicontracts.DesiredVersion:
    properties:
      key:
        type: string
      value: {}
    type: object
  apicontracts.EndpointAddress:
    properties:
      nodename:
        type: string
      podnamespace:
        type: string
    type: object
  apicontracts.FileNameAndData:
    properties:
      data:
        description: +kubebuilder:validation:Required
        type: string
      filename:
        description: +kubebuilder:validation:MinLength=1
        type: string
    type: object
  apicontracts.Filter:
    properties:
      filters:
        items:
          $ref: '#/definitions/apicontracts.FilterMetadata'
        type: array
      globalFilter: {}
      limit:
        type: integer
      skip:
        type: integer
      sort:
        items:
          $ref: '#/definitions/apicontracts.SortMetadata'
        type: array
    type: object
  apicontracts.FilterMetadata:
    properties:
      field:
        type: string
      matchMode:
        $ref: '#/definitions/apicontracts.MatchModeType'
      value: {}
    type: object
  apicontracts.GitConfig:
    properties:
      branch:
        description: +kubebuilder:validation:Required
        type: string
      projectId:
        description: +kubebuilder:validation:Required
        type: integer
      repository:
        description: |-
          +kubebuilder:validation:MinLength=1
          +kubebuilder:validation:Pattern=^[https|git].*
        type: string
      token:
        type: string
      user:
        type: string
    type: object
  apicontracts.Health:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - HealthUnknown
  apicontracts.HealthStatus:
    properties:
      health:
        $ref: '#/definitions/apicontracts.Health'
      messages:
        items:
          $ref: '#/definitions/apicontracts.StatusMessage'
        type: array
    type: object
  apicontracts.Ingress:
    properties:
      class:
        type: string
      health:
        $ref: '#/definitions/apicontracts.Health'
      ingressrules:
        items:
          $ref: '#/definitions/apicontracts.IngressRule'
        type: array
      name:
        type: string
      namespace:
        type: string
      uid:
        type: string
    type: object
  apicontracts.IngressPath:
    properties:
      path:
        type: string
      service:
        $ref: '#/definitions/apicontracts.Service'
    type: object
  apicontracts.IngressRule:
    properties:
      hostname:
        type: string
      ipaddresses:
        items:
          type: string
        type: array
      rules:
        items:
          $ref: '#/definitions/apicontracts.IngressPath'
        type: array
    type: object
  apicontracts.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  apicontracts.KubeconfigCredentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  apicontracts.MatchModeType:
    enum:
    - unknown
    - contains
    - equals
    - in
    type: string
    x-enum-varnames:
    - MatchModeUnknown
    - MatchModeContains
    - MatchModeEquals
    - MatchModeIn
  apicontracts.Metric:
    properties:
      clusterCount:
        type: integer
      cpu:
        type: integer
      cpuConsumed:
        type: integer
      cpuPercentage:
        type: integer
      id:
        type: string
      memory:
        type: integer
      memoryConsumed:
        type: integer
      memoryPercentage:
        type: integer
      name:
        type: string
      nodeCount:
        type: integer
      nodePoolCount:
        type: integer
      priceMonth:
        type: integer
      priceYear:
        type: integer
    type: object
  apicontracts.MetricItem:
    properties:
      id:
        type: string
      metrics:
        $ref: '#/definitions/apicontracts.Metrics'
      name:
        type: string
    type: object
  apicontracts.MetricList:
    properties:
      items:
        items:
          $ref: '#/definitions/apicontracts.MetricItem'
        type: array
    type: object
  apicontracts.Metrics:
    properties:
      clusterCount:
        type: integer
      cpu:
        type: integer
      cpuConsumed:
        type: integer
      cpuPercentage:
        type: integer
      memory:
        type: integer
      memoryConsumed:
        type: integer
      memoryPercentage:
        type: integer
      nodeCount:
        type: integer
      nodePoolCount:
        type: integer
      priceMonth:
        type: integer
      priceYear:
        type: integer
    type: object
  apicontracts.MetricsCustom:
    properties:
      data:
        items:
          $ref: '#/definitions/apicontracts.MetricsCustomItem'
        type: array
    type: object
  apicontracts.MetricsCustomItem:
    properties:
      text:
        type: string
      value:
        type: integer
    type: object
  apicontracts.MetricsReport:
    properties:
      nodes:
        items:
          $ref: '#/definitions/apicontracts.NodeMetric'
        type: array
      owner:
        $ref: '#/definitions/apiresourcecontracts.ResourceOwnerReference'
    type: object
  apicontracts.MetricsTotal:
    properties:
      clusterCount:
        type: integer
      cpu:
        type: integer
      cpuConsumed:
        type: integer
      cpuPercentage:
        type: integer
      datacenterCount:
        type: integer
      memory:
        type: integer
      memoryConsumed:
        type: integer
      memoryPercentage:
        type: integer
      nodeCount:
        type: integer
      nodePoolCount:
        type: integer
      workspaceCount:
        type: integer
    type: object
  apicontracts.NhnTooling:
    properties:
      branch:
        type: string
      environment:
        type: string
      version:
        type: string
    type: object
  apicontracts.Node:
    properties:
      architecture:
        type: string
      containerRuntimeVersion:
        type: string
      created:
        type: string
      kernelVersion:
        type: string
      kubeProxyVersion:
        type: string
      kubeletVersion:
        type: string
      machineClass:
        type: string
      machineName:
        type: string
      metrics:
        $ref: '#/definitions/apicontracts.Metrics'
      name:
        type: string
      operatingSystem:
        type: string
      osImage:
        type: string
      role:
        type: string
    type: object
  apicontracts.NodeMetric:
    properties:
      cpu:
        type: integer
      cpuallocated:
        type: integer
      cpupercentage:
        type: number
      memory:
        type: integer
      memoryallocated:
        type: integer
      memorypercentage:
        type: number
      name:
        type: string
      time:
        type: string
    type: object
  apicontracts.NodePool:
    properties:
      machineClass:
        type: string
      metrics:
        $ref: '#/definitions/apicontracts.Metrics'
      name:
        type: string
      nodes:
        items:
          $ref: '#/definitions/apicontracts.Node'
        type: array
    type: object
  apicontracts.OperatorConfig:
    properties:
      apiVersion:
        type: string
      id:
        type: string
      kind:
        type: string
      spec:
        $ref: '#/definitions/apicontracts.OperatorSpec'
    type: object
  apicontracts.OperatorSpec:
    properties:
      imagePostfix:
        type: string
      tasks:
        items:
          $ref: '#/definitions/apicontracts.OperatorTask'
        type: array
    type: object
  apicontracts.OperatorTask:
    properties:
      index:
        type: integer
      name:
        type: string
      runOnce:
        type: boolean
      version:
        type: string
    type: object
  apicontracts.PaginatedResult-aclmodels_AclV2ListItem:
    properties:
      data:
        items:
          $ref: '#/definitions/aclmodels.AclV2ListItem'
        type: array
      dataCount:
        type: integer
      offset:
        type: integer
      totalCount:
        type: integer
    type: object
  apicontracts.PaginatedResult-apicontracts_ApiKey:
    properties:
      data:
        items:
          $ref: '#/definitions/apicontracts.ApiKey'
        type: array
      dataCount:
        type: integer
      offset:
        type: integer
      totalCount:
        type: integer
    type: object
  apicontracts.PaginatedResult-apicontracts_Cluster:
    properties:
      data:
        items:
          $ref: '#/definitions/apicontracts.Cluster'
        type: array
      dataCount:
        type: integer
      offset:
        type: integer
      totalCount:
        type: integer
    type: object
  apicontracts.PaginatedResult-apicontracts_Metric:
    properties:
      data:
        items:
          $ref: '#/definitions/apicontracts.Metric'
        type: array
      dataCount:
        type: integer
      offset:
        type: integer
      totalCount:
        type: integer
    type: object
  apicontracts.PaginatedResult-apicontracts_Project:
    properties:
      data:
        items:
          $ref: '#/definitions/apicontracts.Project'
        type: array
      dataCount:
        type: integer
      offset:
        type: integer
      totalCount:
        type: integer
    type: object
  apicontracts.Price:
    properties:
      cpu:
        type: integer
      from:
        type: string
      id:
        type: string
      machineClass:
        type: string
      memory:
        type: integer
      memoryBytes:
        type: integer
      price:
        type: integer
      provider:
        $ref: '#/definitions/providermodels.ProviderType'
      to:
        type: string
    type: object
  apicontracts.Project:
    properties:
      active:
        type: boolean
      created:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      projectMetadata:
        $ref: '#/definitions/apicontracts.ProjectMetadata'
      updated:
        type: string
    type: object
  apicontracts.ProjectContactInfo:
    properties:
      email:
        type: string
      phone:
        type: string
      upn:
        type: string
    type: object
  apicontracts.ProjectMetadata:
    properties:
      billing:
        $ref: '#/definitions/apicontracts.Billing'
      roles:
        items:
          $ref: '#/definitions/apicontracts.ProjectRole'
        type: array
      serviceTags:
        additionalProperties:
          type: string
        type: object
    type: object
  apicontracts.ProjectRole:
    properties:
      contactInfo:
        $ref: '#/definitions/apicontracts.ProjectContactInfo'
      roleDefinition:
        $ref: '#/definitions/apicontracts.ProjectRoleDefinition'
    type: object
  apicontracts.ProjectRoleDefinition:
    enum:
    - ""
    - Owner
    - Responsible
    type: string
    x-enum-varnames:
    - ProjectRoleUnknown
    - ProjectRoleOwner
    - ProjectRoleResponsible
  apicontracts.SensitivityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - SensitivityLevelUnknown
    - SensitivityLevelNormal
    - SensitivityLevelModerate
    - SensitivityLevelHigh
    - SensitivityLevelCritical
  apicontracts.Service:
    properties:
      endpoints:
        items:
          $ref: '#/definitions/apicontracts.EndpointAddress'
        type: array
      name:
        type: string
      ports:
        items:
          $ref: '#/definitions/apicontracts.ServicePort'
        type: array
      selector:
        type: string
      type:
        type: string
    type: object
  apicontracts.ServicePort:
    properties:
      name:
        type: string
      nodeport:
        type: string
      protocol:
        type: string
    type: object
  apicontracts.SortMetadata:
    properties:
      sortField:
        type: string
      sortOrder:
        type: integer
    type: object
  apicontracts.StatusMessage:
    properties:
      message:
        type: string
      time:
        type: string
    type: object
  apicontracts.Task:
    properties:
      config:
        $ref: '#/definitions/apicontracts.TaskSpec'
      id:
        type: string
      name:
        type: string
    required:
    - config
    - name
    type: object
  apicontracts.TaskGitSource:
    properties:
      contentPath:
        description: +kubebuilder:validation:Required
        type: string
      gitConfig:
        allOf:
        - $ref: '#/definitions/apicontracts.GitConfig'
        description: +kubebuilder:validation:Required
      type:
        allOf:
        - $ref: '#/definitions/apicontracts.TaskSourceType'
        description: +kubebuilder:validation:Required
    type: object
  apicontracts.TaskScripts:
    properties:
      fileNameAndData:
        description: |-
          +kubebuilder:validation:Required
          +kubebuilder:validation:MinItems=1
        items:
          $ref: '#/definitions/apicontracts.FileNameAndData'
        type: array
      scriptDirectory:
        description: +kubebuilder:validation:Required
        type: string
    type: object
  apicontracts.TaskSecret:
    properties:
      fileNameAndData:
        description: +kubebuilder:validation:Required
        items:
          $ref: '#/definitions/apicontracts.FileNameAndData'
        type: array
      gitSource:
        allOf:
        - $ref: '#/definitions/apicontracts.TaskGitSource'
        description: +optional
      path:
        description: +kubebuilder:validation:MinLength=1
        type: string
      vaultSource:
        allOf:
        - $ref: '#/definitions/apicontracts.TaskVaultSource'
        description: +optional
    type: object
  apicontracts.TaskSourceType:
    enum:
    - ""
    - git
    - vault
    type: string
    x-enum-varnames:
    - Unknown
    - Git
    - Vault
  apicontracts.TaskSpec:
    properties:
      backoffLimit:
        description: |-
          +kubebuilder:validation:Minimum=1
          +kubebuilder:validation:Maximum=10
          +kubebuilder:default=3
        maximum: 10
        minimum: 1
        type: integer
      cmd:
        description: +optional
        type: string
      envVars:
        description: +optional
        items:
          $ref: '#/definitions/apicontracts.KeyValue'
        type: array
      imageName:
        description: +kubebuilder:validation:Required
        type: string
      scripts:
        allOf:
        - $ref: '#/definitions/apicontracts.TaskScripts'
        description: +kubebuilder:validation:Required
      secret:
        allOf:
        - $ref: '#/definitions/apicontracts.TaskSecret'
        description: +optional
      timeoutInSeconds:
        description: |-
          +kubebuilder:validation:Minimum=30
          +kubebuilder:validation:Maximum=600
          +kubebuilder:default=180
        maximum: 600
        minimum: 30
        type: integer
      version:
        description: +kubebuilder:validation:Required
        type: string
    required:
    - imageName
    type: object
  apicontracts.TaskVaultSource:
    properties:
      type:
        allOf:
        - $ref: '#/definitions/apicontracts.TaskSourceType'
        description: +kubebuilder:validation:Required
      vaultPath:
        description: +kubebuilder:validation:Required
        type: string
    type: object
  apicontracts.Topology:
    properties:
      controlPlane:
        $ref: '#/definitions/apicontracts.ControlPlane'
      controlPlaneEndpoint:
        type: string
      egressIp:
        type: string
      nodePools:
        items:
          $ref: '#/definitions/apicontracts.NodePool'
        minItems: 1
        type: array
    type: object
  apicontracts.User:
    properties:
      email:
        type: string
      groups:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  apicontracts.Versions:
    properties:
      agent:
        $ref: '#/definitions/apicontracts.Agent'
      kubernetes:
        type: string
      nhnTooling:
        $ref: '#/definitions/apicontracts.NhnTooling'
    type: object
  apicontracts.Workspace:
    properties:
      datacenter:
        $ref: '#/definitions/apicontracts.Datacenter'
      datacenterId:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  apicontractsv2self.CreateOrRenewApikeyRequest:
    properties:
      name:
        type: string
      ttl:
        type: integer
    required:
    - name
    - ttl
    type: object
  apicontractsv2self.CreateOrRenewApikeyResponse:
    properties:
      expires:
        type: string
      token:
        type: string
    type: object
  apicontractsv2self.SelfData:
    properties:
      auth:
        $ref: '#/definitions/identitymodels.AuthInfo'
      type:
        $ref: '#/definitions/identitymodels.IdentityType'
      user:
        $ref: '#/definitions/apicontractsv2self.SelfUser'
    type: object
  apicontractsv2self.SelfUser:
    properties:
      email:
        type: string
      groups:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  apiresourcecontracts.CriticalityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - CriticalityLevelUnknown
    - CriticalityLevelOpen
    - CriticalityLevelIntern
    - CriticalityLevelShielded
    - CriticalityLevelHighlyShielded
  apiresourcecontracts.EnvironmentType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - EnvironmentUnknown
    - EnvironmentDevelopment
    - EnvironmentTesting
    - EnvironmentQA
    - EnvironmentProduction
  apiresourcecontracts.HashItem:
    properties:
      hash:
        type: string
      uid:
        type: string
    type: object
  apiresourcecontracts.HashList:
    properties:
      items:
        items:
          $ref: '#/definitions/apiresourcecontracts.HashItem'
        type: array
    type: object
  apiresourcecontracts.ResourceAction:
    enum:
    - Add
    - Delete
    - Update
    type: string
    x-enum-varnames:
    - K8sActionAdd
    - K8sActionDelete
    - K8sActionUpdate
  apiresourcecontracts.ResourceActionType:
    enum:
    - ""
    - Create
    - Update
    - Delete
    type: string
    x-enum-varnames:
    - ResourceActionTypeUnknown
    - ResourceActionTypeCreate
    - ResourceActionTypeUpdate
    - ResourceActionTypeDelete
  apiresourcecontracts.ResourceClusterOrder:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/apiresourcecontracts.ResourceMetadata'
      spec:
        $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrderSpec'
      status:
        $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrderStatus'
    type: object
  apiresourcecontracts.ResourceClusterOrderSpec:
    properties:
      cluster:
        minLength: 1
        type: string
      criticality:
        allOf:
        - $ref: '#/definitions/apiresourcecontracts.CriticalityLevel'
        maximum: 4
        minimum: 1
      environment:
        allOf:
        - $ref: '#/definitions/apiresourcecontracts.EnvironmentType'
        maximum: 4
        minimum: 1
      highAvailability:
        type: boolean
      k8sVersion:
        type: string
      nodePools:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrderSpecNodePool'
        minItems: 1
        type: array
      orderBy:
        minLength: 1
        type: string
      orderType:
        allOf:
        - $ref: '#/definitions/apiresourcecontracts.ResourceActionType'
        minLength: 1
      ownerGroup:
        minLength: 1
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/providermodels.ProviderType'
      providerConfig:
        additionalProperties: true
        type: object
      sensitivity:
        allOf:
        - $ref: '#/definitions/apiresourcecontracts.SensitivityLevel'
        maximum: 4
        minimum: 1
      serviceTags:
        additionalProperties:
          type: string
        type: object
    required:
    - cluster
    - nodePools
    - orderBy
    - orderType
    type: object
  apiresourcecontracts.ResourceClusterOrderSpecNodePool:
    properties:
      count:
        minimum: 1
        type: integer
      machineClass:
        minLength: 1
        type: string
      name:
        minLength: 1
        type: string
    required:
    - count
    - machineClass
    - name
    type: object
  apiresourcecontracts.ResourceClusterOrderStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceKubernetesClusterStatusCondition'
        type: array
      createdTime:
        type: string
      lastObservedTime:
        type: string
      phase:
        $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrderStatusPhase'
      status:
        type: string
      updatedTime:
        type: string
    type: object
  apiresourcecontracts.ResourceClusterOrderStatusPhase:
    enum:
    - Pending
    - Creating
    - Updating
    - Deleting
    - Completed
    - Failed
    type: string
    x-enum-varnames:
    - ResourceClusterOrderStatusPhasePending
    - ResourceClusterOrderStatusPhaseCreating
    - ResourceClusterOrderStatusPhaseUpdating
    - ResourceClusterOrderStatusPhaseDeleting
    - ResourceClusterOrderStatusPhaseCompleted
    - ResourceClusterOrderStatusPhaseFailed
  apiresourcecontracts.ResourceKubernetesClusterStatusCondition:
    properties:
      lastTransitionTime:
        description: LastTransitionTime is the last time the condition transitioned
          from one status to another.
        type: string
      message:
        description: Message is a human-readable message indicating details about
          the condition.
        type: string
      reason:
        description: Reason is a brief reason for the condition's last transition.
        type: string
      status:
        description: 'Status is the status of the condition. Valid vales are: ok,
          warning, error, working, unknown.'
        enum:
        - ok
        - warning
        - error
        - working
        - unknown
        example: ok
        type: string
      type:
        description: Type is the type of the condition. For example, "ready", "available",
          etc.
        example: ClusterReady
        type: string
    type: object
  apiresourcecontracts.ResourceListClusterorders:
    properties:
      clusterorders:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrder'
        type: array
      owner:
        $ref: '#/definitions/apiresourcecontracts.ResourceOwnerReference'
    type: object
  apiresourcecontracts.ResourceMetadata:
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      creationTimestamp:
        type: string
      generation:
        type: integer
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      namespace:
        type: string
      ownerReferences:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceMetadataOwnerReference'
        type: array
      resourceVersion:
        type: string
      uid:
        type: string
    type: object
  apiresourcecontracts.ResourceMetadataOwnerReference:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      name:
        type: string
      uid:
        type: string
    type: object
  apiresourcecontracts.ResourceNode:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      metadata:
        $ref: '#/definitions/apiresourcecontracts.ResourceMetadata'
      spec:
        $ref: '#/definitions/apiresourcecontracts.ResourceNodeSpec'
      status:
        $ref: '#/definitions/apiresourcecontracts.ResourceNodeStatus'
    type: object
  apiresourcecontracts.ResourceNodeSpec:
    properties:
      podCIDR:
        type: string
      podCIDRs:
        items:
          type: string
        type: array
      providerID:
        type: string
      taints:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceNodeSpecTaints'
        type: array
    type: object
  apiresourcecontracts.ResourceNodeSpecTaints:
    properties:
      effect:
        type: string
      key:
        type: string
    type: object
  apiresourcecontracts.ResourceNodeStatus:
    properties:
      addresses:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceNodeStatusAddresses'
        type: array
      capacity:
        $ref: '#/definitions/apiresourcecontracts.ResourceNodeStatusCapacity'
      conditions:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceNodeStatusConditions'
        type: array
      nodeInfo:
        $ref: '#/definitions/apiresourcecontracts.ResourceNodeStatusNodeinfo'
    type: object
  apiresourcecontracts.ResourceNodeStatusAddresses:
    properties:
      address:
        type: string
      type:
        type: string
    type: object
  apiresourcecontracts.ResourceNodeStatusCapacity:
    properties:
      cpu:
        type: string
      ephemeralStorage:
        type: string
      memory:
        type: string
      pods:
        type: string
    type: object
  apiresourcecontracts.ResourceNodeStatusConditions:
    properties:
      lastHeartbeatTime:
        type: string
      lastTransitionTime:
        type: string
      message:
        type: string
      reason:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  apiresourcecontracts.ResourceNodeStatusNodeinfo:
    properties:
      architecture:
        type: string
      bootID:
        type: string
      containerRuntimeVersion:
        type: string
      kernelVersion:
        type: string
      kubeProxyVersion:
        type: string
      kubeletVersion:
        type: string
      machineID:
        type: string
      operatingSystem:
        type: string
      osImage:
        type: string
      systemUUID:
        type: string
    type: object
  apiresourcecontracts.ResourceOwnerReference:
    properties:
      scope:
        allOf:
        - $ref: '#/definitions/aclmodels.Acl2Scope'
        description: cluster, workspace,...
      subject:
        description: ror id eg clusterId or workspaceName
        type: string
    type: object
  apiresourcecontracts.ResourceUpdateModel:
    properties:
      action:
        $ref: '#/definitions/apiresourcecontracts.ResourceAction'
      apiVersion:
        type: string
      hash:
        type: string
      kind:
        type: string
      owner:
        $ref: '#/definitions/apiresourcecontracts.ResourceOwnerReference'
      resource: {}
      uid:
        type: string
      version:
        $ref: '#/definitions/apiresourcecontracts.ResourceVersion'
    type: object
  apiresourcecontracts.ResourceVersion:
    enum:
    - v1
    - v2
    type: string
    x-enum-varnames:
    - ResourceVersionV1
    - ResourceVersionV2
  apiresourcecontracts.ResourceVulnerabilityReportReportVulnerability:
    properties:
      fixedVersion:
        type: string
      installedVersion:
        type: string
      primaryLink:
        type: string
      resource:
        type: string
      score:
        type: number
      severity:
        type: string
      title:
        type: string
      vulnerabilityID:
        type: string
    type: object
  apiresourcecontracts.SensitivityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - SensitivityLevelUnknown
    - SensitivityLevelNormal
    - SensitivityLevelModerate
    - SensitivityLevelHigh
    - SensitivityLevelCritical
  apiview.View:
    properties:
      columns:
        items:
          $ref: '#/definitions/apiview.ViewField'
        type: array
      rows:
        items:
          items:
            $ref: '#/definitions/apiview.ViewData'
          type: array
        type: array
      type:
        $ref: '#/definitions/apiview.ViewType'
    type: object
  apiview.ViewData:
    properties:
      description:
        type: string
      fieldName:
        type: string
      fieldValue:
        type: string
      resourceUid:
        type: string
    type: object
  apiview.ViewField:
    properties:
      default:
        type: boolean
      description:
        type: string
      name:
        type: string
      order:
        type: integer
      possibleValues:
        items:
          type: string
        type: array
      resourceFieldRef:
        description: '"spec.clusterdata.clustername"'
        type: string
      resourceType:
        $ref: '#/definitions/v1.TypeMeta'
      type:
        $ref: '#/definitions/apiview.ViewFieldType'
      writeable:
        type: boolean
    type: object
  apiview.ViewFieldType:
    enum:
    - string
    - number
    - date
    - datetime
    - boolean
    - enum
    type: string
    x-enum-varnames:
    - ViewFieldTypeString
    - ViewFieldTypeNumber
    - ViewFieldTypeDate
    - ViewFieldTypeDateTime
    - ViewFieldTypeBoolean
    - ViewFieldTypeEnum
  apiview.ViewMetadata:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      version:
        type: string
    type: object
  apiview.ViewType:
    enum:
    - grid
    - table
    - chart
    type: string
    x-enum-varnames:
    - ViewTypeGrid
    - ViewTypeTable
    - ViewTypeChart
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReport:
    properties:
      clusterid:
        type: string
      metadata:
        $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportMetadata'
      reports:
        items:
          $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportReport'
        type: array
      summary:
        $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSummary'
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportMetadata:
    properties:
      name:
        type: string
      title:
        type: string
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportReport:
    properties:
      id:
        type: string
      name:
        type: string
      severity:
        $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSeverity'
      totalfail:
        type: integer
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSeverity:
    enum:
    - CRITICAL
    - HIGH
    - MEDIUM
    - LOW
    - UNKOWN
    type: string
    x-enum-varnames:
    - CRITICAL
    - HIGH
    - MEDIUM
    - LOW
    - UNKNOWN
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReportSummary:
    properties:
      failcount:
        type: integer
      passcount:
        type: integer
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsArtifact:
    properties:
      repository:
        type: string
      tag:
        type: string
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsScanner:
    properties:
      name:
        type: string
      vendor:
        type: string
      version:
        type: string
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsView:
    properties:
      clusterId:
        type: string
      criticalCount:
        type: integer
      environment:
        type: string
      highCount:
        type: integer
      lowCount:
        type: integer
      mediumCount:
        type: integer
      namespaces:
        items:
          $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewNamespace'
        type: array
      project:
        $ref: '#/definitions/apicontracts.Project'
      total:
        type: integer
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewNamespace:
    properties:
      criticalCount:
        type: integer
      highCount:
        type: integer
      lowCount:
        type: integer
      mediumCount:
        type: integer
      name:
        type: string
      reports:
        items:
          $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewReport'
        type: array
      total:
        type: integer
    type: object
  github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsViewReport:
    properties:
      artifact:
        $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsArtifact'
      criticalCount:
        type: integer
      highCount:
        type: integer
      lowCount:
        type: integer
      mediumCount:
        type: integer
      name:
        type: string
      owner_ref:
        $ref: '#/definitions/apiresourcecontracts.ResourceMetadataOwnerReference'
      scanner:
        $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsScanner'
      total:
        type: integer
      uid:
        type: string
      updateTimestamp:
        type: string
      vulnerabilities:
        items:
          $ref: '#/definitions/apiresourcecontracts.ResourceVulnerabilityReportReportVulnerability'
        type: array
    type: object
  identitymodels.AuthInfo:
    properties:
      authProvider:
        $ref: '#/definitions/identitymodels.IdentityProvider'
      authProviderId:
        type: string
      expirationTime:
        type: string
    type: object
  identitymodels.IdentityProvider:
    enum:
    - OIDC
    - APIKEY
    type: string
    x-enum-varnames:
    - IdentityProviderOidc
    - IdentityProviderApiKey
  identitymodels.IdentityType:
    enum:
    - User
    - Cluster
    - Service
    type: string
    x-enum-varnames:
    - IdentityTypeUser
    - IdentityTypeCluster
    - IdentityTypeService
  intstr.IntOrString:
    properties:
      intVal:
        type: integer
      strVal:
        type: string
      type:
        $ref: '#/definitions/intstr.Type'
    type: object
  intstr.Type:
    enum:
    - 0
    - 1
    type: integer
    x-enum-comments:
      Int: The IntOrString holds an int.
      String: The IntOrString holds a string.
    x-enum-varnames:
    - Int
    - String
  messages.RulesetIdentityModel:
    properties:
      id:
        type: string
      type:
        $ref: '#/definitions/messages.RulesetIdentityType'
    type: object
  messages.RulesetIdentityType:
    enum:
    - unknown
    - internal
    - cluster
    type: string
    x-enum-varnames:
    - RulesetIdentityTypeUnknown
    - RulesetIdentityTypeInternal
    - RulesetIdentityTypeCluster
  messages.RulesetLifetimeType:
    enum:
    - unknown
    - regular
    - oneshot
    type: string
    x-enum-varnames:
    - RulesetLifetimeTypeUnknown
    - RulesetLifetimeTypeRegular
    - RulesetLifetimeTypeOneshot
  messages.RulesetModel:
    properties:
      id:
        type: string
      identity:
        $ref: '#/definitions/messages.RulesetIdentityModel'
      resources:
        items:
          $ref: '#/definitions/messages.RulesetResourceModel'
        type: array
    type: object
  messages.RulesetResourceModel:
    properties:
      id:
        type: string
      ref:
        properties:
          apiVersion:
            description: used for constructing a unique situation where uid is wildcard
            type: string
          kind:
            type: string
          name:
            description: only for presenting
            type: string
          namespace:
            type: string
          uid:
            description: if present, only this is used for lookup
            type: string
        type: object
      rules:
        items:
          $ref: '#/definitions/messages.RulesetRuleModel'
        type: array
    type: object
  messages.RulesetRuleModel:
    properties:
      id:
        type: string
      lifetime:
        $ref: '#/definitions/messages.RulesetLifetimeType'
      service:
        $ref: '#/definitions/messages.RulesetServiceType'
      slack:
        $ref: '#/definitions/messages.RulesetSlackModel'
      type:
        $ref: '#/definitions/messages.RulesetRuleType'
    type: object
  messages.RulesetRuleType:
    enum:
    - unknown
    - started
    - created
    - updated
    - crashed
    - deleted
    type: string
    x-enum-varnames:
    - RulesetRuleTypeUnknown
    - RulesetRuleTypeStarted
    - RulesetRuleTypeCreated
    - RulesetRuleTypeUpdated
    - RulesetRuleTypeCrashed
    - RulesetRuleTypeDeleted
  messages.RulesetServiceType:
    enum:
    - unknown
    - ignore
    - slack
    - sms
    type: string
    x-enum-varnames:
    - RulesetServiceTypeUnknown
    - RulesetServiceTypeIgnore
    - RulesetServiceTypeSlack
    - RulesetServiceTypeSms
  messages.RulesetSlackModel:
    properties:
      channelId:
        type: string
    type: object
  providermodels.Provider:
    properties:
      disabled:
        type: boolean
      name:
        type: string
      type:
        $ref: '#/definitions/providermodels.ProviderType'
    type: object
  providermodels.ProviderType:
    enum:
    - unknown
    - tanzu
    - aks
    - k3d
    - kind
    - gke
    - talos
    - vitistack
    type: string
    x-enum-varnames:
    - ProviderTypeUnknown
    - ProviderTypeTanzu
    - ProviderTypeAks
    - ProviderTypeK3d
    - ProviderTypeKind
    - ProviderTypeGke
    - ProviderTypeTalos
    - ProviderTypeVitistack
  rorerror.RorError:
    properties:
      message:
        description: Error message
        example: Bad Request
        type: string
      status:
        description: HTTP status code
        example: 400
        type: integer
    type: object
  rorresourceowner.RorResourceOwnerReference:
    properties:
      scope:
        allOf:
        - $ref: '#/definitions/aclmodels.Acl2Scope'
        description: cluster, workspace,...
      subject:
        description: ror id eg clusterId or workspaceName
        type: string
    type: object
  rorresources.Resource:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      application:
        $ref: '#/definitions/rortypes.ResourceApplication'
      appproject:
        $ref: '#/definitions/rortypes.ResourceAppProject'
      backupjob:
        $ref: '#/definitions/rortypes.ResourceBackupJob'
      backuprun:
        $ref: '#/definitions/rortypes.ResourceBackupRun'
      certificate:
        $ref: '#/definitions/rortypes.ResourceCertificate'
      clustercompliancereport:
        $ref: '#/definitions/rortypes.ResourceClusterComplianceReport'
      clusterorder:
        $ref: '#/definitions/rortypes.ResourceClusterOrder'
      clustervulnerabilityreport:
        $ref: '#/definitions/rortypes.ResourceClusterVulnerabilityReport'
      configauditreport:
        $ref: '#/definitions/rortypes.ResourceConfigAuditReport'
      configuration:
        $ref: '#/definitions/rortypes.ResourceConfiguration'
      daemonset:
        $ref: '#/definitions/rortypes.ResourceDaemonSet'
      datacenter:
        $ref: '#/definitions/rortypes.ResourceDatacenter'
      deployment:
        $ref: '#/definitions/rortypes.ResourceDeployment'
      endpoints:
        $ref: '#/definitions/rortypes.ResourceEndpoints'
      exposedsecretreport:
        $ref: '#/definitions/rortypes.ResourceExposedSecretReport'
      ingress:
        $ref: '#/definitions/rortypes.ResourceIngress'
      ingressclass:
        $ref: '#/definitions/rortypes.ResourceIngressClass'
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      kubernetescluster:
        $ref: '#/definitions/rortypes.ResourceKubernetesCluster'
      kubernetesmachineclass:
        $ref: '#/definitions/rortypes.ResourceKubernetesMachineClass'
      metadata:
        $ref: '#/definitions/v1.ObjectMeta'
      namespace:
        $ref: '#/definitions/rortypes.ResourceNamespace'
      networkpolicy:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicy'
      node:
        $ref: '#/definitions/rortypes.ResourceNode'
      persistentvolumeclaim:
        $ref: '#/definitions/rortypes.ResourcePersistentVolumeClaim'
      pod:
        $ref: '#/definitions/rortypes.ResourcePod'
      policyreport:
        $ref: '#/definitions/rortypes.ResourcePolicyReport'
      project:
        $ref: '#/definitions/rortypes.ResourceProject'
      provider:
        $ref: '#/definitions/rortypes.ResourceProvider'
      rbacassessmentreport:
        $ref: '#/definitions/rortypes.ResourceRbacAssessmentReport'
      replicaset:
        $ref: '#/definitions/rortypes.ResourceReplicaSet'
      rormeta:
        $ref: '#/definitions/rortypes.ResourceRorMeta'
      route:
        $ref: '#/definitions/rortypes.ResourceRoute'
      service:
        $ref: '#/definitions/rortypes.ResourceService'
      slackmessage:
        $ref: '#/definitions/rortypes.ResourceSlackMessage'
      statefulset:
        $ref: '#/definitions/rortypes.ResourceStatefulSet'
      storageclass:
        $ref: '#/definitions/rortypes.ResourceStorageClass'
      tanzukubernetescluster:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesCluster'
      tanzukubernetesrelease:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesRelease'
      unknown:
        $ref: '#/definitions/rortypes.ResourceUnknown'
      virtualmachine:
        $ref: '#/definitions/rortypes.ResourceVirtualMachine'
      virtualmachineclass:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineClass'
      vulnerabilityevent:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityEvent'
      vulnerabilityreport:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityReport'
      workspace:
        $ref: '#/definitions/rortypes.ResourceWorkspace'
    type: object
  rorresources.ResourceSet:
    properties:
      resources:
        items:
          $ref: '#/definitions/rorresources.Resource'
        type: array
    type: object
  rortypes.AquaReportScanner:
    properties:
      name:
        type: string
      vendor:
        type: string
      version:
        type: string
    type: object
  rortypes.AquaReportSummary:
    properties:
      criticalCount:
        type: integer
      highCount:
        type: integer
      lowCount:
        type: integer
      mediumCount:
        type: integer
      total:
        type: integer
    type: object
  rortypes.CriticalityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - CriticalityLevelUnknown
    - CriticalityLevelOpen
    - CriticalityLevelIntern
    - CriticalityLevelShielded
    - CriticalityLevelHighlyShielded
  rortypes.Datacenter:
    properties:
      apiEndpoint:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/rortypes.DatacenterLocation'
      name:
        type: string
      provider:
        $ref: '#/definitions/providermodels.ProviderType'
    type: object
  rortypes.DatacenterLocation:
    properties:
      country:
        type: string
      id:
        type: string
      region:
        type: string
    type: object
  rortypes.EnvironmentType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - EnvironmentUnknown
    - EnvironmentDevelopment
    - EnvironmentTesting
    - EnvironmentQA
    - EnvironmentProduction
  rortypes.KubernetesClusterAutoscalingConfig:
    properties:
      enabled:
        type: boolean
      maxReplicas:
        type: integer
      minReplicas:
        type: integer
    type: object
  rortypes.KubernetesClusterAutoscalingSpec:
    properties:
      enabled:
        type: boolean
      maxReplicas:
        type: integer
      minReplicas:
        type: integer
      scalingRules:
        items:
          type: string
        type: array
    type: object
  rortypes.KubernetesClusterClusterDetails:
    properties:
      controlplane:
        $ref: '#/definitions/rortypes.KubernetesClusterControlPlaneStatus'
      externalId:
        type: string
      nodepools:
        description: TODO
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterNodePoolStatus'
        type: array
      price:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusPrice'
        description: Price is the price of the cluster, e.g., "1000 NOK/month"
      resources:
        $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResources'
    type: object
  rortypes.KubernetesClusterClusterState:
    properties:
      cluster:
        $ref: '#/definitions/rortypes.KubernetesClusterClusterDetails'
      created:
        type: string
      egressIP:
        type: string
      endpoints:
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterEndpoint'
        type: array
      lastUpdated:
        type: string
      lastUpdatedBy:
        type: string
      versions:
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterVersion'
        type: array
    type: object
  rortypes.KubernetesClusterCondition:
    properties:
      lastTransitionTime:
        description: LastTransitionTime is the last time the condition transitioned
          from one status to another.
        type: string
      message:
        description: Message is a human-readable message indicating details about
          the condition.
        type: string
      reason:
        description: Reason is a brief reason for the condition's last transition.
        type: string
      status:
        description: 'Status is the status of the condition. Valid vales are: ok,
          warning, error, working, unknown.'
        enum:
        - ok
        - warning
        - error
        - working
        - unknown
        example: ok
        type: string
      type:
        description: Type is the type of the condition. For example, "ready", "available",
          etc.
        example: ClusterReady
        type: string
    type: object
  rortypes.KubernetesClusterControlPlaneStatus:
    properties:
      machineClass:
        description: MachineClass is the machine class of the control plane, e.g.,
          "c5.large", "m5.xlarge"
        type: string
      message:
        type: string
      nodes:
        description: Nodes is the list of the uuids of the nodes in the control plane
        items:
          type: string
        type: array
      resources:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResources'
        description: Resources is the resources of the control plane, e.g., CPU, Memory,
          Disk, GPU
      scale:
        description: Scale is the number of replicas of the control plane.
        type: integer
      status:
        type: string
    type: object
  rortypes.KubernetesClusterEndpoint:
    properties:
      address:
        description: Address is the address of the endpoint, e.g., "https://api.example.com",
          "http://dashboard.example.com"
        type: string
      name:
        description: Name is the name of the endpoint, e.g., "controllplane", "kubernetes",
          "api", "dashboard, grafana, argocd", "datacenter"
        type: string
    type: object
  rortypes.KubernetesClusterNodePool:
    properties:
      autoscaling:
        $ref: '#/definitions/rortypes.KubernetesClusterAutoscalingSpec'
      machineClass:
        type: string
      metadata:
        $ref: '#/definitions/rortypes.KubernetesClusterSpecMetadataDetails'
      name:
        type: string
      provider:
        type: string
      replicas:
        type: integer
      taint:
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterTaint'
        type: array
      version:
        description: Kubernetes version, e.g., "1.23.0"
        type: string
    type: object
  rortypes.KubernetesClusterNodePoolStatus:
    properties:
      autoscaling:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterAutoscalingConfig'
        description: Autoscaling is the autoscaling configuration of the node pool.
      machineClass:
        description: MachineClass is the machine class of the nodepool, e.g., "c5.large",
          "m5.xlarge"
        type: string
      message:
        type: string
      name:
        type: string
      nodes:
        description: Nodes is the list of the uuids of the nodes in the node pool
        items:
          type: string
        type: array
      resources:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResources'
        description: Resources is the resources of the node pool, e.g., CPU, Memory,
          Disk, GPU
      scale:
        description: Scale is the number of replicas of the nodepool.
        type: integer
      status:
        type: string
    type: object
  rortypes.KubernetesClusterSpec:
    properties:
      data:
        $ref: '#/definitions/rortypes.KubernetesClusterSpecData'
      topology:
        $ref: '#/definitions/rortypes.KubernetesClusterSpecTopology'
    type: object
  rortypes.KubernetesClusterSpecControlPlane:
    properties:
      machineClass:
        type: string
      metadata:
        $ref: '#/definitions/rortypes.KubernetesClusterSpecMetadataDetails'
      provider:
        type: string
      replicas:
        type: integer
      storage:
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterStorage'
        type: array
      version:
        description: Kubernetes version, e.g., "1.23.0"
        type: string
    type: object
  rortypes.KubernetesClusterSpecData:
    properties:
      clusterId:
        type: string
      clusterUid:
        description: ClusterUID is a unique identifier for the cluster, e.g., "12345678-1234-1234-1234-123456789012"
        type: string
      datacenter:
        type: string
      environment:
        type: string
      project:
        type: string
      provider:
        type: string
      region:
        type: string
      workorder:
        type: string
      workspace:
        type: string
      zone:
        type: string
    type: object
  rortypes.KubernetesClusterSpecMetadataDetails:
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      labels:
        additionalProperties:
          type: string
        type: object
    type: object
  rortypes.KubernetesClusterSpecTopology:
    properties:
      controlplane:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterSpecControlPlane'
        description: ControlPlane contains the control plane configuration.
      version:
        description: Kubernetes version, e.g., "1.23.0"
        type: string
      workers:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterWorkers'
        description: Workers contains the worker nodes configuration.
    type: object
  rortypes.KubernetesClusterStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterCondition'
        type: array
      phase:
        description: Provisioning, Running, Deleting, Failed, Updating
        type: string
      state:
        $ref: '#/definitions/rortypes.KubernetesClusterClusterState'
    type: object
  rortypes.KubernetesClusterStatusClusterStatusResource:
    properties:
      capacity:
        allOf:
        - $ref: '#/definitions/rortypes.Quantity'
        description: Capacity is the total capacity of the resource."
      percentage:
        description: Percentage is the percentage of the resource that is currently
          used as an int.
        type: integer
      used:
        allOf:
        - $ref: '#/definitions/rortypes.Quantity'
        description: Used is the amount of the resource that is currently used."
    type: object
  rortypes.KubernetesClusterStatusClusterStatusResources:
    properties:
      cpu:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResource'
        description: CPU is the total CPU capacity of the cluster, if not specified
          in millicores, e.g., "16 cores", "8000 millicores"
      disk:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResource'
        description: Disk is the total disk capacity of the cluster, if not specified
          in bytes"
      gpu:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResource'
        description: GPU is the total GPU capacity of the cluster, if not specified
          in number of GPUs"
      memory:
        allOf:
        - $ref: '#/definitions/rortypes.KubernetesClusterStatusClusterStatusResource'
        description: Memory is the total memory capacity of the cluster, if not specified
          in bytes, e.g., "64 GB", "128000 MB", "25600000000 bytes"
    type: object
  rortypes.KubernetesClusterStatusPrice:
    properties:
      monthly:
        description: Monthly is the monthly price of the cluster in your currency,
          e.g., "1000"
        type: integer
      yearly:
        description: Yearly is the yearly price of the cluster, e.g., "12000"
        type: integer
    type: object
  rortypes.KubernetesClusterStorage:
    properties:
      class:
        type: string
      path:
        type: string
      size:
        type: string
    type: object
  rortypes.KubernetesClusterTaint:
    properties:
      effect:
        type: string
      key:
        type: string
      value:
        type: string
    type: object
  rortypes.KubernetesClusterVersion:
    properties:
      branch:
        type: string
      name:
        type: string
      version:
        type: string
    type: object
  rortypes.KubernetesClusterWorkers:
    properties:
      nodePools:
        items:
          $ref: '#/definitions/rortypes.KubernetesClusterNodePool'
        type: array
    type: object
  rortypes.ProviderType:
    enum:
    - ""
    - Tanzu
    - Azure
    - K3D
    type: string
    x-enum-varnames:
    - ProviderTypeUnknown
    - ProviderTypeTanzu
    - ProviderTypeAzure
    - ProviderTypeK3d
  rortypes.Quantity:
    properties:
      Format:
        enum:
        - DecimalExponent
        - BinarySI
        - DecimalSI
        type: string
        x-enum-comments:
          BinarySI: e.g., 12Mi (12 * 2^20)
          DecimalExponent: e.g., 12e6
          DecimalSI: e.g., 12M  (12 * 10^6)
        x-enum-varnames:
        - DecimalExponent
        - BinarySI
        - DecimalSI
    type: object
  rortypes.ResourceAction:
    enum:
    - Add
    - Delete
    - Update
    type: string
    x-enum-varnames:
    - K8sActionAdd
    - K8sActionDelete
    - K8sActionUpdate
  rortypes.ResourceAppProject:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceAppProjectSpec'
    type: object
  rortypes.ResourceAppProjectSpec:
    properties:
      description:
        type: string
      destinations:
        items:
          $ref: '#/definitions/rortypes.ResourceApplicationSpecDestination'
        type: array
      sourceRepos:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceApplication:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceApplicationSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceApplicationStatus'
    type: object
  rortypes.ResourceApplicationSpec:
    properties:
      destination:
        $ref: '#/definitions/rortypes.ResourceApplicationSpecDestination'
      project:
        type: string
      source:
        $ref: '#/definitions/rortypes.ResourceApplicationSpecSource'
      syncPolicy:
        $ref: '#/definitions/rortypes.ResourceApplicationSpecSyncpolicy'
    type: object
  rortypes.ResourceApplicationSpecDestination:
    properties:
      name:
        type: string
      namespace:
        type: string
      server:
        type: string
    type: object
  rortypes.ResourceApplicationSpecSource:
    properties:
      chart:
        type: string
      path:
        type: string
      repoURL:
        type: string
      targetRevision:
        type: string
    type: object
  rortypes.ResourceApplicationSpecSyncpolicy:
    properties:
      automated:
        $ref: '#/definitions/rortypes.ResourceApplicationSpecSyncpolicyAutomated'
      retry:
        $ref: '#/definitions/rortypes.ResourceApplicationSpecSyncpolicyRetry'
      syncOptions:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceApplicationSpecSyncpolicyAutomated:
    properties:
      allowEmpty:
        type: boolean
      prune:
        type: boolean
      selfHeal:
        type: boolean
    type: object
  rortypes.ResourceApplicationSpecSyncpolicyRetry:
    properties:
      backoff:
        $ref: '#/definitions/rortypes.ResourceApplicationSpecSyncpolicyRetryBackoff'
      limit:
        type: integer
    type: object
  rortypes.ResourceApplicationSpecSyncpolicyRetryBackoff:
    properties:
      duration:
        type: string
      factor:
        type: integer
      maxDuration:
        type: string
    type: object
  rortypes.ResourceApplicationStatus:
    properties:
      health:
        $ref: '#/definitions/rortypes.ResourceApplicationStatusHealth'
      operationState:
        $ref: '#/definitions/rortypes.ResourceApplicationStatusOperationstate'
      reconciledAt:
        type: string
      sourceType:
        type: string
      sync:
        $ref: '#/definitions/rortypes.ResourceApplicationStatusSync'
    type: object
  rortypes.ResourceApplicationStatusHealth:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  rortypes.ResourceApplicationStatusOperationstate:
    properties:
      finishedAt:
        type: string
      message:
        type: string
      phase:
        type: string
      startedAt:
        type: string
      status:
        type: string
    type: object
  rortypes.ResourceApplicationStatusSync:
    properties:
      revision:
        type: string
      status:
        type: string
    type: object
  rortypes.ResourceBackupDestination:
    properties:
      id:
        type: string
      name:
        type: string
      status:
        description: Status spesific to the destination - remote being unavailable
        type: string
      type:
        description: Local, remote, archive, etc.
        type: string
    type: object
  rortypes.ResourceBackupJob:
    properties:
      id:
        type: string
      provider:
        type: string
      source:
        type: string
      spec:
        $ref: '#/definitions/rortypes.ResourceBackupJobSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceBackupJobStatus'
    type: object
  rortypes.ResourceBackupJobSpec:
    properties:
      activeTargets:
        description: Direct targets for this backup job
        items:
          $ref: '#/definitions/rortypes.ResourceBackupTarget'
        type: array
      backupDestinations:
        description: Any destination defined by this backup job
        items:
          $ref: '#/definitions/rortypes.ResourceBackupDestination'
        type: array
      indirectBackupTargets:
        description: Indirect targets for this backup job
        items:
          $ref: '#/definitions/rortypes.ResourceIndirectBackupTarget'
        type: array
      name:
        description: The name of the job
        type: string
      policyId:
        description: |-
          Defines the policy if applicable at the local system
          If policies are not used these can be left as blank
        type: string
      schedules:
        items:
          $ref: '#/definitions/rortypes.ResourceBackupSchedule'
        type: array
      status:
        description: Status of the backup job, active, paused, etc.
        type: string
    type: object
  rortypes.ResourceBackupJobStatus:
    properties:
      backupRunIds:
        description: Any runs connected to this backup job
        items:
          type: string
        type: array
      lastUpdated:
        type: string
      location:
        type: string
      policyName:
        type: string
      resourceBackupJobSpec:
        $ref: '#/definitions/rortypes.ResourceBackupJobSpec'
    type: object
  rortypes.ResourceBackupRun:
    properties:
      id:
        type: string
      provider:
        type: string
      source:
        type: string
      spec:
        $ref: '#/definitions/rortypes.ResourceBackupJobSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceBackupRunStatus'
    type: object
  rortypes.ResourceBackupRunStatus:
    properties:
      backupDestinations:
        items:
          $ref: '#/definitions/rortypes.ResourceBackupDestination'
        type: array
      backupJobId:
        type: string
      backupStorage:
        $ref: '#/definitions/rortypes.ResourceBackupStorage'
      backupTargets:
        items:
          $ref: '#/definitions/rortypes.ResourceBackupTarget'
        type: array
      endTime:
        description: When the run was finished
        type: string
      expiryTime:
        description: When the run will expire and be deleted
        type: string
      id:
        type: string
      lastUpdated:
        type: string
      startTime:
        description: When the run was started
        type: string
    type: object
  rortypes.ResourceBackupSchedule:
    properties:
      endTime:
        description: When will the job be forcibly stopped, if empty it will continue
          indefinitely
        type: string
      frequency:
        description: How many time per unit will this backup run
        type: integer
      retention:
        $ref: '#/definitions/rortypes.ResourceBackupScheduleRetention'
      startTime:
        description: When will the job start
        type: string
      unit:
        description: What unit of time is this schedule going to run in
        type: string
    type: object
  rortypes.ResourceBackupScheduleRetention:
    properties:
      duration:
        type: integer
      unit:
        type: string
    type: object
  rortypes.ResourceBackupSource:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
      uuid:
        type: string
    type: object
  rortypes.ResourceBackupStorage:
    properties:
      logicalSize:
        description: The total logical size of the VM
        type: integer
      physicalSize:
        description: Physical data written to the backup system
        type: integer
      sourceSize:
        description: Total changed data in the run, incremental will have changes
          since last time, full runs will have the entire VM - not including unusued
          space
        type: integer
      unit:
        description: What unit are the sizes in
        type: string
    type: object
  rortypes.ResourceBackupTarget:
    properties:
      externalId:
        description: Defines any external id
        type: string
      id:
        description: Defines the object's id
        type: string
      name:
        description: Defines the object's name
        type: string
      size:
        allOf:
        - $ref: '#/definitions/rortypes.ResourceBackupStorage'
        description: Defines the size of the snapshots of the target
      source:
        allOf:
        - $ref: '#/definitions/rortypes.ResourceBackupSource'
        description: Defines the source of this object to the backup system
    type: object
  rortypes.ResourceCertificate:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceCertificateSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceCertificateStatus'
    type: object
  rortypes.ResourceCertificateSpec:
    properties:
      dnsNames:
        items:
          type: string
        type: array
      issuerRef:
        $ref: '#/definitions/rortypes.ResourceCertificateSpecIssuerref'
      secretName:
        type: string
      usages:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceCertificateSpecIssuerref:
    properties:
      group:
        type: string
      kind:
        type: string
      name:
        type: string
    type: object
  rortypes.ResourceCertificateStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/rortypes.ResourceCertificateStatusCondition'
        type: array
      notAfter:
        type: string
      notBefore:
        type: string
      renewalTime:
        type: string
    type: object
  rortypes.ResourceCertificateStatusCondition:
    properties:
      lastTransitionTime:
        type: string
      message:
        type: string
      observedGeneration:
        type: integer
      reason:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceClusterComplianceReport:
    type: object
  rortypes.ResourceClusterOrder:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceClusterOrderSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceClusterOrderStatus'
    type: object
  rortypes.ResourceClusterOrderSpec:
    properties:
      clusterName:
        minLength: 1
        type: string
      criticality:
        allOf:
        - $ref: '#/definitions/rortypes.CriticalityLevel'
        maximum: 4
        minimum: 1
      environment:
        allOf:
        - $ref: '#/definitions/rortypes.EnvironmentType'
        maximum: 4
        minimum: 1
      highAvailability:
        type: boolean
      nodePools:
        items:
          $ref: '#/definitions/rortypes.ResourceClusterOrderSpecNodePool'
        minItems: 1
        type: array
      orderBy:
        minLength: 1
        type: string
      ownerGroup:
        minLength: 1
        type: string
      projectId:
        minLength: 1
        type: string
      provider:
        allOf:
        - $ref: '#/definitions/rortypes.ProviderType'
        minLength: 1
      providerConfig:
        additionalProperties: true
        type: object
      sensitivity:
        allOf:
        - $ref: '#/definitions/rortypes.SensitivityLevel'
        maximum: 4
        minimum: 1
      serviceTags:
        additionalProperties:
          type: string
        type: object
    required:
    - clusterName
    - criticality
    - environment
    - nodePools
    - orderBy
    - ownerGroup
    - projectId
    - provider
    - sensitivity
    type: object
  rortypes.ResourceClusterOrderSpecNodePool:
    properties:
      count:
        minimum: 1
        type: integer
      machineClass:
        minLength: 1
        type: string
      name:
        minLength: 1
        type: string
    required:
    - count
    - machineClass
    - name
    type: object
  rortypes.ResourceClusterOrderStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/rortypes.ResourceKubernetesClusterOrderStatusCondition'
        type: array
      createdTime:
        type: string
      lastObservedTime:
        type: string
      phase:
        type: string
      status:
        type: string
      updatedTime:
        type: string
    type: object
  rortypes.ResourceClusterVulnerabilityReport:
    properties:
      report:
        additionalProperties:
          $ref: '#/definitions/rortypes.ResourceClusterVulnerabilityReportReport'
        type: object
      summary:
        $ref: '#/definitions/rortypes.ResourceClusterVulnerabilityReportSummary'
    type: object
  rortypes.ResourceClusterVulnerabilityReportReport:
    properties:
      firstObserved:
        type: string
      lastObserved:
        type: string
      owners:
        items:
          $ref: '#/definitions/rortypes.ResourceClusterVulnerabilityReportReportOwner'
        type: array
      primaryLink:
        type: string
      score:
        type: number
      severity:
        type: string
      status:
        $ref: '#/definitions/rortypes.ResourceClusterVulnerabilityReportReportStatus'
      title:
        type: string
    type: object
  rortypes.ResourceClusterVulnerabilityReportReportOwner:
    properties:
      digest:
        type: string
      fixedVersion:
        type: string
      installedVersion:
        type: string
      namespace:
        type: string
      ownerReferences:
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      repository:
        type: string
      resource:
        type: string
      tag:
        type: string
    type: object
  rortypes.ResourceClusterVulnerabilityReportReportStatus:
    properties:
      comment:
        type: string
      reason:
        $ref: '#/definitions/rortypes.VulnerabilityDismissalReason'
      riskAssessment:
        type: string
      status:
        $ref: '#/definitions/rortypes.VulnerabilityStatus'
      until:
        type: string
    type: object
  rortypes.ResourceClusterVulnerabilityReportSummary:
    properties:
      critical:
        type: integer
      high:
        type: integer
      low:
        type: integer
      medium:
        type: integer
      unknown:
        type: integer
    type: object
  rortypes.ResourceConfigAuditReport:
    properties:
      report:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityReportReport'
    type: object
  rortypes.ResourceConfiguration:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceConfigurationSpec'
    type: object
  rortypes.ResourceConfigurationSpec:
    properties:
      b64enc:
        type: boolean
      data:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceDaemonSet:
    properties:
      status:
        $ref: '#/definitions/rortypes.ResourceDaemonSetStatus'
    type: object
  rortypes.ResourceDaemonSetStatus:
    properties:
      currentNumberScheduled:
        type: integer
      currentReplicas:
        type: integer
      desiredNumberScheduled:
        type: integer
      numberAvailable:
        type: integer
      numberReady:
        type: integer
      numberUnavailable:
        type: integer
      updatedNumberScheduled:
        type: integer
    type: object
  rortypes.ResourceDatacenter:
    properties:
      legacy:
        $ref: '#/definitions/rortypes.Datacenter'
      spec:
        $ref: '#/definitions/rortypes.ResourceDatacenterSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceDatacenterStatus'
    type: object
  rortypes.ResourceDatacenterSpec:
    properties:
      workspaces:
        items:
          $ref: '#/definitions/rortypes.ResourceWorkspace'
        type: array
    type: object
  rortypes.ResourceDatacenterStatus:
    properties:
      apiEndpoint:
        type: string
      location:
        $ref: '#/definitions/rortypes.DatacenterLocation'
      workspaces:
        items:
          $ref: '#/definitions/rortypes.ResourceWorkspace'
        type: array
    type: object
  rortypes.ResourceDeployment:
    properties:
      status:
        $ref: '#/definitions/rortypes.ResourceDeploymentStatus'
    type: object
  rortypes.ResourceDeploymentStatus:
    properties:
      availableReplicas:
        type: integer
      readyReplicas:
        type: integer
      replicas:
        type: integer
      updatedReplicas:
        type: integer
    type: object
  rortypes.ResourceEndpointSpecSubsets:
    properties:
      addresses:
        items:
          $ref: '#/definitions/rortypes.ResourceEndpointSpecSubsetsAddresses'
        type: array
      notReadyAddresses:
        items:
          $ref: '#/definitions/rortypes.ResourceEndpointSpecSubsetsNotReadyAddresses'
        type: array
      ports:
        items:
          $ref: '#/definitions/rortypes.ResourceEndpointSpecSubsetsPorts'
        type: array
    type: object
  rortypes.ResourceEndpointSpecSubsetsAddresses:
    properties:
      hostname:
        type: string
      ip:
        type: string
      nodeName:
        type: string
      targetRef:
        $ref: '#/definitions/rortypes.ResourceEndpointSpecSubsetsAddressesTargetRef'
    type: object
  rortypes.ResourceEndpointSpecSubsetsAddressesTargetRef:
    properties:
      apiVersion:
        type: string
      fieldPath:
        type: string
      kind:
        type: string
      name:
        type: string
      namespace:
        type: string
      resourceVersion:
        type: string
      uid:
        type: string
    type: object
  rortypes.ResourceEndpointSpecSubsetsNotReadyAddresses:
    properties:
      hostname:
        type: string
      ip:
        type: string
      nodeName:
        type: string
      targetRef:
        $ref: '#/definitions/rortypes.ResourceEndpointSpecSubsetsNotReadyAddressesTargetRef'
    type: object
  rortypes.ResourceEndpointSpecSubsetsNotReadyAddressesTargetRef:
    properties:
      apiVersion:
        type: string
      fieldPath:
        type: string
      kind:
        type: string
      name:
        type: string
      namespace:
        type: string
      resourceVersion:
        type: string
      uid:
        type: string
    type: object
  rortypes.ResourceEndpointSpecSubsetsPorts:
    properties:
      appProtocol:
        type: string
      name:
        type: string
      port:
        type: integer
      protocol:
        type: string
    type: object
  rortypes.ResourceEndpoints:
    properties:
      subsets:
        items:
          $ref: '#/definitions/rortypes.ResourceEndpointSpecSubsets'
        type: array
    type: object
  rortypes.ResourceExposedSecretReport:
    properties:
      report:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityReportReport'
    type: object
  rortypes.ResourceIndirectBackupTarget:
    properties:
      ids:
        description: For where the ids are referenced
        items:
          type: string
        type: array
      keyValues:
        additionalProperties:
          items:
            type: string
          type: array
        description: For key values pairs, some allow the same key with different
          values
        type: object
      type:
        description: The type of indrect target, some allow tags and/or other types
          of criteria
        type: string
    type: object
  rortypes.ResourceIngress:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceIngressSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceIngressStatus'
    type: object
  rortypes.ResourceIngressClass:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceIngressClassSpec'
    type: object
  rortypes.ResourceIngressClassSpec:
    properties:
      controller:
        type: string
      parameters:
        $ref: '#/definitions/rortypes.ResourceIngressClassSpecParameters'
    type: object
  rortypes.ResourceIngressClassSpecParameters:
    properties:
      apiGroup:
        type: string
      kind:
        type: string
      name:
        type: string
      namespace:
        type: string
      scope:
        type: string
    type: object
  rortypes.ResourceIngressSpec:
    properties:
      defaultBackend:
        $ref: '#/definitions/rortypes.ResourceIngressSpecRulesHttpPathsBackend'
      ingressClassName:
        type: string
      rules:
        items:
          $ref: '#/definitions/rortypes.ResourceIngressSpecRules'
        type: array
      tls:
        items:
          $ref: '#/definitions/rortypes.ResourceIngressSpecTls'
        type: array
    type: object
  rortypes.ResourceIngressSpecBackendResource:
    properties:
      apiGroup:
        type: string
      kind:
        type: string
      name:
        type: string
    type: object
  rortypes.ResourceIngressSpecBackendService:
    properties:
      name:
        type: string
      port:
        $ref: '#/definitions/rortypes.ResourceIngressSpecBackendServicePort'
    type: object
  rortypes.ResourceIngressSpecBackendServicePort:
    properties:
      name:
        type: string
      number:
        type: integer
    type: object
  rortypes.ResourceIngressSpecRules:
    properties:
      apiGroup:
        type: string
      http:
        $ref: '#/definitions/rortypes.ResourceIngressSpecRulesHttp'
    type: object
  rortypes.ResourceIngressSpecRulesHttp:
    properties:
      paths:
        items:
          $ref: '#/definitions/rortypes.ResourceIngressSpecRulesHttpPaths'
        type: array
    type: object
  rortypes.ResourceIngressSpecRulesHttpPaths:
    properties:
      backend:
        $ref: '#/definitions/rortypes.ResourceIngressSpecRulesHttpPathsBackend'
      path:
        type: string
      pathType:
        type: string
    type: object
  rortypes.ResourceIngressSpecRulesHttpPathsBackend:
    properties:
      resource:
        $ref: '#/definitions/rortypes.ResourceIngressSpecBackendResource'
      service:
        $ref: '#/definitions/rortypes.ResourceIngressSpecBackendService'
    type: object
  rortypes.ResourceIngressSpecTls:
    properties:
      hosts:
        items:
          type: string
        type: array
      secretName:
        type: string
    type: object
  rortypes.ResourceIngressStatus:
    properties:
      loadBalancer:
        $ref: '#/definitions/rortypes.ResourceIngressStatusLoadBalancer'
    type: object
  rortypes.ResourceIngressStatusLoadBalancer:
    properties:
      ingress:
        items:
          $ref: '#/definitions/rortypes.ResourceIngressStatusLoadBalancerIngress'
        type: array
    type: object
  rortypes.ResourceIngressStatusLoadBalancerIngress:
    properties:
      hostname:
        type: string
      ip:
        type: string
    type: object
  rortypes.ResourceKubernetesCluster:
    properties:
      spec:
        $ref: '#/definitions/rortypes.KubernetesClusterSpec'
      status:
        $ref: '#/definitions/rortypes.KubernetesClusterStatus'
    type: object
  rortypes.ResourceKubernetesClusterOrderStatusCondition:
    properties:
      lastTransitionTime:
        type: string
      message:
        type: string
      reason:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceKubernetesMachineClass:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceKubernetesMachineClassSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceKubernetesMachineClassStatus'
    type: object
  rortypes.ResourceKubernetesMachineClassSpec:
    properties:
      cpu:
        type: string
      gpu:
        type: boolean
      memory:
        type: string
      name:
        type: string
    type: object
  rortypes.ResourceKubernetesMachineClassStatus:
    properties:
      cpu:
        type: string
      gpu:
        type: boolean
      memory:
        type: string
      name:
        type: string
    type: object
  rortypes.ResourceNamespace:
    type: object
  rortypes.ResourceNetworkPolicy:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicySpec'
      status:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicyStatus'
    type: object
  rortypes.ResourceNetworkPolicyCondition:
    properties:
      lastTransitionTime:
        type: string
      message:
        type: string
      observedGeneration:
        type: integer
      reason:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceNetworkPolicyEgressRule:
    properties:
      ports:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyPort'
        type: array
      to:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyPeer'
        type: array
    type: object
  rortypes.ResourceNetworkPolicyIngressRule:
    properties:
      from:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyPeer'
        type: array
      ports:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyPort'
        type: array
    type: object
  rortypes.ResourceNetworkPolicyIpBlock:
    properties:
      cidr:
        type: string
      except:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceNetworkPolicyPeer:
    properties:
      ipBlock:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicyIpBlock'
      namespaceSelector:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicySelector'
      podSelector:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicySelector'
    type: object
  rortypes.ResourceNetworkPolicyPodSelector:
    properties:
      matchLabels:
        additionalProperties:
          type: string
        type: object
    type: object
  rortypes.ResourceNetworkPolicyPort:
    properties:
      endPort:
        type: integer
      port:
        $ref: '#/definitions/intstr.IntOrString'
      protocol:
        type: string
    type: object
  rortypes.ResourceNetworkPolicySelector:
    properties:
      matchExpressions:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicySelectorExpression'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        type: object
    type: object
  rortypes.ResourceNetworkPolicySelectorExpression:
    properties:
      key:
        type: string
      operator:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceNetworkPolicySpec:
    properties:
      egress:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyEgressRule'
        type: array
      ingress:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyIngressRule'
        type: array
      podSelector:
        $ref: '#/definitions/rortypes.ResourceNetworkPolicyPodSelector'
      policyTypes:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceNetworkPolicyStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/rortypes.ResourceNetworkPolicyCondition'
        type: array
    type: object
  rortypes.ResourceNode:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceNodeSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceNodeStatus'
    type: object
  rortypes.ResourceNodeSpec:
    properties:
      podCIDR:
        type: string
      podCIDRs:
        items:
          type: string
        type: array
      providerID:
        type: string
      taints:
        items:
          $ref: '#/definitions/rortypes.ResourceNodeSpecTaints'
        type: array
    type: object
  rortypes.ResourceNodeSpecTaints:
    properties:
      effect:
        type: string
      key:
        type: string
    type: object
  rortypes.ResourceNodeStatus:
    properties:
      addresses:
        items:
          $ref: '#/definitions/rortypes.ResourceNodeStatusAddresses'
        type: array
      capacity:
        $ref: '#/definitions/rortypes.ResourceNodeStatusCapacity'
      conditions:
        items:
          $ref: '#/definitions/rortypes.ResourceNodeStatusConditions'
        type: array
      nodeInfo:
        $ref: '#/definitions/rortypes.ResourceNodeStatusNodeinfo'
    type: object
  rortypes.ResourceNodeStatusAddresses:
    properties:
      address:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceNodeStatusCapacity:
    properties:
      cpu:
        type: string
      ephemeralStorage:
        type: string
      memory:
        type: string
      pods:
        type: string
    type: object
  rortypes.ResourceNodeStatusConditions:
    properties:
      lastHeartbeatTime:
        type: string
      lastTransitionTime:
        type: string
      message:
        type: string
      reason:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceNodeStatusNodeinfo:
    properties:
      architecture:
        type: string
      bootID:
        type: string
      containerRuntimeVersion:
        type: string
      kernelVersion:
        type: string
      kubeProxyVersion:
        type: string
      kubeletVersion:
        type: string
      machineID:
        type: string
      operatingSystem:
        type: string
      osImage:
        type: string
      systemUUID:
        type: string
    type: object
  rortypes.ResourcePersistentVolumeClaim:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourcePersistentVolumeClaimSpec'
      status:
        $ref: '#/definitions/rortypes.ResourcePersistentVolumeClaimStatus'
    type: object
  rortypes.ResourcePersistentVolumeClaimSpec:
    properties:
      accessModes:
        items:
          type: string
        type: array
      resources:
        $ref: '#/definitions/rortypes.ResourcePersistentVolumeClaimSpecResources'
      storageClassName:
        type: string
      volumeMode:
        type: string
      volumeName:
        type: string
    type: object
  rortypes.ResourcePersistentVolumeClaimSpecResources:
    properties:
      limits:
        additionalProperties:
          type: string
        type: object
      requests:
        additionalProperties:
          type: string
        type: object
    type: object
  rortypes.ResourcePersistentVolumeClaimStatus:
    properties:
      accessModes:
        items:
          type: string
        type: array
      capacity:
        additionalProperties:
          type: string
        type: object
      phase:
        type: string
    type: object
  rortypes.ResourcePod:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourcePodSpec'
      status:
        $ref: '#/definitions/rortypes.ResourcePodStatus'
    type: object
  rortypes.ResourcePodSpec:
    properties:
      containers:
        items:
          $ref: '#/definitions/rortypes.ResourcePodSpecContainers'
        type: array
      nodeName:
        type: string
      serviceAccountName:
        type: string
    type: object
  rortypes.ResourcePodSpecContainers:
    properties:
      image:
        type: string
      name:
        type: string
      ports:
        items:
          $ref: '#/definitions/rortypes.ResourcePodSpecContainersPorts'
        type: array
    type: object
  rortypes.ResourcePodSpecContainersPorts:
    properties:
      containerPort:
        type: integer
      name:
        type: string
      protocol:
        type: string
    type: object
  rortypes.ResourcePodStatus:
    properties:
      message:
        type: string
      phase:
        type: string
      reason:
        type: string
      startTime:
        type: string
    type: object
  rortypes.ResourcePolicyReport:
    properties:
      lastReported:
        type: string
      results:
        items:
          $ref: '#/definitions/rortypes.ResourcePolicyReportResults'
        type: array
      summary:
        $ref: '#/definitions/rortypes.ResourcePolicyReportSummary'
    type: object
  rortypes.ResourcePolicyReportResults:
    properties:
      category:
        type: string
      message:
        type: string
      policy:
        type: string
      properties:
        additionalProperties:
          type: string
        type: object
      resources:
        items:
          $ref: '#/definitions/rortypes.ResourcePolicyReportResultsResources'
        type: array
      result:
        type: string
      severity:
        type: string
    type: object
  rortypes.ResourcePolicyReportResultsResources:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
      name:
        type: string
      uid:
        type: string
    type: object
  rortypes.ResourcePolicyReportSummary:
    properties:
      error:
        type: integer
      fail:
        type: integer
      pass:
        type: integer
      skip:
        type: integer
      warn:
        type: integer
    type: object
  rortypes.ResourceProject:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceProjectSpec'
    type: object
  rortypes.ResourceProjectSpec:
    properties:
      active:
        type: boolean
      createdTime:
        type: string
      description:
        type: string
      projectName:
        type: string
      roles:
        items:
          $ref: '#/definitions/rortypes.ResourceProjectSpecRole'
        type: array
      serviceTag:
        type: string
      tags:
        items:
          type: string
        type: array
      updatedTime:
        type: string
      workorder:
        type: string
    type: object
  rortypes.ResourceProjectSpecRole:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      upn:
        type: string
    type: object
  rortypes.ResourceProvider:
    type: object
  rortypes.ResourceRbacAssessmentReport:
    properties:
      report:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityReportReport'
    type: object
  rortypes.ResourceReplicaSet:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceReplicaSetSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceReplicaSetStatus'
    type: object
  rortypes.ResourceReplicaSetSpec:
    properties:
      replicas:
        type: integer
      selector:
        $ref: '#/definitions/rortypes.ResourceReplicaSetSpecSelector'
    type: object
  rortypes.ResourceReplicaSetSpecSelector:
    properties:
      matchExpressions:
        items:
          $ref: '#/definitions/rortypes.ResourceReplicaSetSpecSelectorMatchExpressions'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        type: object
    type: object
  rortypes.ResourceReplicaSetSpecSelectorMatchExpressions:
    properties:
      key:
        type: string
      operator:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceReplicaSetStatus:
    properties:
      availableReplicas:
        type: integer
      readyReplicas:
        type: integer
      replicas:
        type: integer
    type: object
  rortypes.ResourceRorMeta:
    properties:
      action:
        $ref: '#/definitions/rortypes.ResourceAction'
      hash:
        type: string
      internal:
        type: boolean
      lastReported:
        type: string
      ownerref:
        $ref: '#/definitions/rorresourceowner.RorResourceOwnerReference'
      tags:
        items:
          $ref: '#/definitions/rortypes.ResourceTag'
        type: array
      version:
        type: string
    type: object
  rortypes.ResourceRoute:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceRouteSpec'
    type: object
  rortypes.ResourceRouteMessageType:
    properties:
      apiVersion:
        type: string
      kind:
        type: string
    type: object
  rortypes.ResourceRouteReceiver:
    properties:
      slack:
        items:
          $ref: '#/definitions/rortypes.ResourceRouteSlackReceiver'
        type: array
    type: object
  rortypes.ResourceRouteSlackReceiver:
    properties:
      channelId:
        type: string
    type: object
  rortypes.ResourceRouteSpec:
    properties:
      messageType:
        $ref: '#/definitions/rortypes.ResourceRouteMessageType'
      receivers:
        $ref: '#/definitions/rortypes.ResourceRouteReceiver'
    type: object
  rortypes.ResourceService:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceServiceSpec'
    type: object
  rortypes.ResourceServicePorts:
    properties:
      appProtocol:
        type: string
      name:
        type: string
      port:
        type: integer
      protocol:
        type: string
      targetPort:
        $ref: '#/definitions/intstr.IntOrString'
    type: object
  rortypes.ResourceServiceSpec:
    properties:
      clusterIP:
        type: string
      clusterIPs:
        items:
          type: string
        type: array
      externalIPs:
        items:
          type: string
        type: array
      externalName:
        type: string
      externalTrafficPolicy:
        type: string
      internalTrafficPolicy:
        type: string
      ipFamilies:
        items:
          type: string
        type: array
      ipFamilyPolicy:
        type: string
      ports:
        items:
          $ref: '#/definitions/rortypes.ResourceServicePorts'
        type: array
      selector:
        additionalProperties:
          type: string
        type: object
      type:
        type: string
    type: object
  rortypes.ResourceSlackMessage:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceSlackMessageSpec'
      status:
        items:
          $ref: '#/definitions/rortypes.ResourceSlackMessageStatus'
        type: array
    type: object
  rortypes.ResourceSlackMessageResult:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - SLACK_MESSAGE_OK
    - SLACK_MESSAGE_ERROR
    - SLACK_MESSAGE_UNKNOWN
  rortypes.ResourceSlackMessageSpec:
    properties:
      channelId:
        type: string
      message:
        type: string
    type: object
  rortypes.ResourceSlackMessageStatus:
    properties:
      error: {}
      result:
        $ref: '#/definitions/rortypes.ResourceSlackMessageResult'
      timestamp:
        type: string
    type: object
  rortypes.ResourceStatefulSet:
    properties:
      status:
        $ref: '#/definitions/rortypes.ResourceStatefulSetStatus'
    type: object
  rortypes.ResourceStatefulSetStatus:
    properties:
      availableReplicas:
        type: integer
      currentReplicas:
        type: integer
      readyReplicas:
        type: integer
      replicas:
        type: integer
      updatedReplicas:
        type: integer
    type: object
  rortypes.ResourceStorageClass:
    properties:
      allowVolumeExpansion:
        type: boolean
      provisioner:
        type: string
      reclaimPolicy:
        type: string
      volumeBindingMode:
        type: string
    type: object
  rortypes.ResourceTag:
    properties:
      key:
        type: string
      properties:
        additionalProperties:
          type: string
        type: object
      value:
        type: string
    type: object
  rortypes.ResourceTanuzKuberntesClusterSpec:
    properties:
      distribution:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecDistribution'
      settings:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettings'
      topology:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopology'
    type: object
  rortypes.ResourceTanzuKubernetesCluster:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceTanuzKuberntesClusterSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterStatus'
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecDistribution:
    properties:
      fullVersion:
        type: string
      version:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettings:
    properties:
      network:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetwork'
      storage:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsStorage'
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetwork:
    properties:
      cni:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkCni'
      pods:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkPods'
      proxy:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkProxy'
      serviceDomain:
        type: string
      services:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkServices'
      trust:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrust'
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkCni:
    properties:
      name:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkPods:
    properties:
      cidrBlocks:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkProxy:
    properties:
      httpProxy:
        type: string
      httpsProxy:
        type: string
      noProxy:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkServices:
    properties:
      cidrBlocks:
        items:
          type: string
        type: array
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrust:
    properties:
      additionalTrustedCAs:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrustAdditionalTrustedCA'
        type: array
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsNetworkTrustAdditionalTrustedCA:
    properties:
      data:
        type: string
      name:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecSettingsStorage:
    properties:
      classes:
        items:
          type: string
        type: array
      defaultClass:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopology:
    properties:
      controlPlane:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlane'
      nodePools:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePools'
        type: array
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlane:
    properties:
      nodeDrainTimeout:
        type: string
      replicas:
        type: integer
      storageClass:
        type: string
      tkr:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkr'
      vmClass:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkr:
    properties:
      reference:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkrReference'
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyControlPlaneTkrReference:
    properties:
      kind:
        type: string
      name:
        type: string
      namespace:
        type: string
      uid:
        description: ResourceVersion string `json:"resourceVersion"`
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePools:
    properties:
      failureDomain:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      nodeDrainTimeout:
        type: string
      replicas:
        type: integer
      storageClass:
        type: string
      taints:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTaints'
        type: array
      tkr:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkr'
      vmClass:
        type: string
      volumes:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsVolumes'
        type: array
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTaints:
    properties:
      effect:
        type: string
      key:
        type: string
      timeAdded:
        type: string
      value:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkr:
    properties:
      reference:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkrReference'
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsTkrReference:
    properties:
      fieldPath:
        type: string
      kind:
        type: string
      name:
        type: string
      namespace:
        type: string
      uid:
        description: ResourceVersion string `json:"resourceVersion"`
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterSpecTopologyNodePoolsVolumes:
    properties:
      capasity:
        additionalProperties:
          type: string
        type: object
      mountPath:
        type: string
      name:
        type: string
      storageClass:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterStatus:
    properties:
      apiEndpoints:
        description: Addons []ResourceTanzuKubernetesClusterStatusAddons `json:"addons"`
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterStatusAPIEndpoints'
        type: array
      conditions:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesClusterStatusConditions'
        type: array
      phase:
        type: string
      totalWorkerReplicas:
        type: integer
      version:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesClusterStatusAPIEndpoints:
    properties:
      host:
        type: string
      port:
        type: integer
    type: object
  rortypes.ResourceTanzuKubernetesClusterStatusConditions:
    properties:
      lastTransitionTime:
        type: string
      message:
        type: string
      reason:
        type: string
      severity:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesRelease:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesReleaseSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesReleaseStatus'
    type: object
  rortypes.ResourceTanzuKubernetesReleaseSpec:
    properties:
      images:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesReleaseSpecImage'
        type: array
      kubernetesVersion:
        type: string
      nodeImageRef:
        $ref: '#/definitions/rortypes.ResourceTanzuKubernetesReleaseSpecNodeImageRef'
      repository:
        type: string
      version:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesReleaseSpecImage:
    properties:
      name:
        type: string
      repository:
        type: string
      tag:
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesReleaseSpecNodeImageRef:
    properties:
      apiVersion:
        type: string
      fieldPath:
        type: string
      kind:
        type: string
      namespace:
        type: string
      uid:
        description: ResourceVersion string `json:"resourceVersion"`
        type: string
    type: object
  rortypes.ResourceTanzuKubernetesReleaseStatus:
    properties:
      conditions:
        items:
          $ref: '#/definitions/rortypes.ResourceTanzuKubernetesReleaseStatusCondition'
        type: array
    type: object
  rortypes.ResourceTanzuKubernetesReleaseStatusCondition:
    properties:
      lastTransitionTime:
        type: string
      message:
        type: string
      reason:
        type: string
      severity:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  rortypes.ResourceUnknown:
    type: object
  rortypes.ResourceVirtualMachine:
    properties:
      externalId:
        description: This is the ID of the vm in the hypervisor layer
        type: string
      provider:
        type: string
      spec:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineStatus'
    type: object
  rortypes.ResourceVirtualMachineClass:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineClassSpec'
      status:
        additionalProperties:
          type: string
        type: object
    type: object
  rortypes.ResourceVirtualMachineClassSpec:
    properties:
      description:
        type: string
      hardware:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineClassSpecHardware'
    type: object
  rortypes.ResourceVirtualMachineClassSpecHardware:
    properties:
      cpus:
        type: integer
      instanceStorage:
        allOf:
        - $ref: '#/definitions/rortypes.ResourceVirtualMachineClassSpecHardwareInstanceStorage'
        description: Devices ResourceVirtualMachineClassSpecHardwareDevice `json:"devices"`
    type: object
  rortypes.ResourceVirtualMachineClassSpecHardwareInstanceStorage:
    properties:
      storageClass:
        type: string
    type: object
  rortypes.ResourceVirtualMachineCpuSpec:
    properties:
      coresPerSocket:
        description: cores per socket
        type: integer
      sockets:
        type: integer
    type: object
  rortypes.ResourceVirtualMachineCpuStatus:
    properties:
      coresPerSocket:
        description: cores per socket
        type: integer
      sockets:
        type: integer
      unit:
        description: describes what unit the usage is given in
        type: string
      usage:
        type: integer
    type: object
  rortypes.ResourceVirtualMachineDiskSpec:
    properties:
      id:
        type: string
      name:
        type: string
      sizeBytes:
        type: integer
      type:
        type: string
    type: object
  rortypes.ResourceVirtualMachineDiskStatus:
    properties:
      id:
        type: string
      isMounted:
        description: |-
          is this disk mounted by the os? A disk might be attached to the vm but
          not mounted by the OS, it can also be unknown because the vm might not report
          this or may not have tools installed, false can mean we dont know or that
          it is actually not mounted.
        type: boolean
      name:
        type: string
      sizeBytes:
        type: integer
      type:
        type: string
      usageBytes:
        type: integer
    type: object
  rortypes.ResourceVirtualMachineMemorySpec:
    properties:
      sizeBytes:
        type: integer
    type: object
  rortypes.ResourceVirtualMachineMemoryStatus:
    properties:
      sizeBytes:
        type: integer
      unit:
        description: describes what unit the usage is given in
        type: string
      usage:
        type: integer
    type: object
  rortypes.ResourceVirtualMachineNetworkStatus:
    properties:
      dns:
        type: string
      gateway:
        type: string
      id:
        type: string
      ipv4:
        type: string
      ipv6:
        type: string
      mac:
        type: string
      mask:
        type: string
    type: object
  rortypes.ResourceVirtualMachineOperatingSystemStatus:
    properties:
      architecture:
        type: string
      family:
        type: string
      hostName:
        type: string
      id:
        type: string
      name:
        type: string
      powerState:
        type: string
      toolVersion:
        type: string
      version:
        type: string
    type: object
  rortypes.ResourceVirtualMachineSpec:
    properties:
      cpu:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineCpuSpec'
      disks:
        items:
          $ref: '#/definitions/rortypes.ResourceVirtualMachineDiskSpec'
        type: array
      memory:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineMemorySpec'
      name:
        type: string
    type: object
  rortypes.ResourceVirtualMachineState:
    properties:
      reason:
        type: string
      state:
        type: string
      time:
        type: string
    type: object
  rortypes.ResourceVirtualMachineStatus:
    properties:
      cpu:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineCpuStatus'
      disks:
        items:
          $ref: '#/definitions/rortypes.ResourceVirtualMachineDiskStatus'
        type: array
      lastUpdated:
        type: string
      location:
        type: string
      memory:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineMemoryStatus'
      networks:
        items:
          $ref: '#/definitions/rortypes.ResourceVirtualMachineNetworkStatus'
        type: array
      operatingSystem:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineOperatingSystemStatus'
      state:
        $ref: '#/definitions/rortypes.ResourceVirtualMachineState'
      tags:
        additionalProperties:
          $ref: '#/definitions/rortypes.ResourceVirtualMachineTag'
        type: object
    type: object
  rortypes.ResourceVirtualMachineTag:
    properties:
      description:
        type: string
      key:
        type: string
      value:
        type: string
    type: object
  rortypes.ResourceVulnerabilityEvent:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityEventSpec'
    type: object
  rortypes.ResourceVulnerabilityEventSpec:
    properties:
      message:
        type: string
      owner:
        $ref: '#/definitions/rorresourceowner.RorResourceOwnerReference'
    type: object
  rortypes.ResourceVulnerabilityReport:
    properties:
      report:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityReportReport'
    type: object
  rortypes.ResourceVulnerabilityReportReport:
    properties:
      artifact:
        $ref: '#/definitions/rortypes.ResourceVulnerabilityReportReportArtifact'
      scanner:
        $ref: '#/definitions/rortypes.AquaReportScanner'
      summary:
        $ref: '#/definitions/rortypes.AquaReportSummary'
      updateTimestamp:
        type: string
      vulnerabilities:
        items:
          $ref: '#/definitions/rortypes.ResourceVulnerabilityReportReportVulnerability'
        type: array
    type: object
  rortypes.ResourceVulnerabilityReportReportArtifact:
    properties:
      digest:
        type: string
      repository:
        type: string
      tag:
        type: string
    type: object
  rortypes.ResourceVulnerabilityReportReportVulnerability:
    properties:
      fixedVersion:
        type: string
      installedVersion:
        type: string
      primaryLink:
        type: string
      resource:
        type: string
      score:
        type: number
      severity:
        type: string
      title:
        type: string
      vulnerabilityID:
        type: string
    type: object
  rortypes.ResourceWorkspace:
    properties:
      spec:
        $ref: '#/definitions/rortypes.ResourceWorkspaceSpec'
      status:
        $ref: '#/definitions/rortypes.ResourceWorkspaceStatus'
    type: object
  rortypes.ResourceWorkspaceMachineClass:
    properties:
      name:
        type: string
    type: object
  rortypes.ResourceWorkspaceSpec:
    properties:
      availableMachineClasses:
        items:
          $ref: '#/definitions/rortypes.ResourceWorkspaceMachineClass'
        type: array
      availableStorageClasses:
        items:
          $ref: '#/definitions/rortypes.ResourceWorkspaceStorageClass'
        type: array
      defaultMachineClass:
        $ref: '#/definitions/rortypes.ResourceWorkspaceMachineClass'
      defaultStorageClass:
        $ref: '#/definitions/rortypes.ResourceWorkspaceStorageClass'
      kubernetesClusters:
        items:
          $ref: '#/definitions/rortypes.ResourceKubernetesCluster'
        type: array
    type: object
  rortypes.ResourceWorkspaceStatus:
    properties:
      availableMachineClasses:
        items:
          $ref: '#/definitions/rortypes.ResourceWorkspaceMachineClass'
        type: array
      availableStorageClasses:
        items:
          $ref: '#/definitions/rortypes.ResourceWorkspaceStorageClass'
        type: array
      datacenterId:
        type: string
      defaultMachineClass:
        $ref: '#/definitions/rortypes.ResourceWorkspaceMachineClass'
      defaultStorageClass:
        $ref: '#/definitions/rortypes.ResourceWorkspaceStorageClass'
      kubernetesClusters:
        items:
          $ref: '#/definitions/rortypes.ResourceKubernetesCluster'
        type: array
    type: object
  rortypes.ResourceWorkspaceStorageClass:
    properties:
      name:
        type: string
    type: object
  rortypes.SensitivityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - SensitivityLevelUnknown
    - SensitivityLevelNormal
    - SensitivityLevelModerate
    - SensitivityLevelHigh
    - SensitivityLevelCritical
  rortypes.VulnerabilityDismissalReason:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - ACCEPTABLE_RISK
    - FALSE_POSITIVE
    - NOT_APPLICABLE
  rortypes.VulnerabilityStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - NOT_ASSESSED
    - NEEDS_TRIAGE
    - CONFIRMED
    - DISMISSED
  v1.FieldsV1:
    type: object
  v1.ManagedFieldsEntry:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
        type: string
      fieldsType:
        description: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
      fieldsV1:
        allOf:
        - $ref: '#/definitions/v1.FieldsV1'
        description: |-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
          +optional
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        allOf:
        - $ref: '#/definitions/v1.ManagedFieldsOperationType'
        description: |-
          Operation is the type of operation which lead to this ManagedFieldsEntry being created.
          The only valid values for this field are 'Apply' and 'Update'.
      subresource:
        description: |-
          Subresource is the name of the subresource used to update that object, or
          empty string if the object was updated through the main resource. The
          value of this field is used to distinguish between managers, even if they
          share the same name. For example, a status update will be distinct from a
          regular update using the same manager name.
          Note that the APIVersion field is not related to the Subresource field and
          it always corresponds to the version of the main resource.
        type: string
      time:
        description: |-
          Time is the timestamp of when the ManagedFields entry was added. The
          timestamp will also be updated if a field is added, the manager
          changes any of the owned fields value or removes a field. The
          timestamp does not update when a field is removed from the entry
          because another manager took it over.
          +optional
        type: string
    type: object
  v1.ManagedFieldsOperationType:
    enum:
    - Apply
    - Update
    type: string
    x-enum-varnames:
    - ManagedFieldsOperationApply
    - ManagedFieldsOperationUpdate
  v1.ObjectMeta:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
          +optional
        type: object
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        type: integer
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
          +listType=set
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will return a 409.

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
          +listType=map
          +listMapKey=uid
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
          +optional
        type: string
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
          +optional
        type: string
    type: object
  v1.OwnerReference:
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
          for how the garbage collector interacts with this field and enforces the foreground deletion.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
        type: string
      uid:
        description: |-
          UID of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
        type: string
    type: object
  v1.TypeMeta:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
    type: object
info:
  contact:
    name: ROR
    url: https://github.com/NorskHelsenett/ror
  description: 'ROR-API, need any help? Go to channel #drift-sdi-devops in norskhelsenett.slack.com
    slack workspace'
  title: Swagger ROR-API
  version: "0.1"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Get health status for ROR-API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.HealthStatus'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Health status
      tags:
      - health status
  /v1/acl:
    post:
      consumes:
      - application/json
      description: Create acl
      parameters:
      - description: Acl
        in: body
        name: acl
        required: true
        schema:
          $ref: '#/definitions/aclmodels.AclV2ListItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/aclmodels.AclV2ListItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create acl
      tags:
      - acl
  /v1/acl/{aclId}:
    delete:
      consumes:
      - application/json
      description: Delete a acl by id
      parameters:
      - description: aclId
        in: path
        name: aclId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete acl
      tags:
      - acl
    get:
      consumes:
      - application/json
      description: Get acl by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-aclmodels_AclV2ListItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get acl by id
      tags:
      - acl
    put:
      consumes:
      - application/json
      description: Update acl
      parameters:
      - description: aclId
        in: path
        name: aclId
        required: true
        type: string
      - description: Acl
        in: body
        name: acl
        required: true
        schema:
          $ref: '#/definitions/aclmodels.AclV2ListItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/aclmodels.AclV2ListItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update acl
      tags:
      - acl
  /v1/acl/{scope}/{subject}/{access}:
    head:
      description: Check acl by scope, subject and access method
      parameters:
      - description: Scope
        in: path
        name: scope
        type: string
      - description: Subject
        in: path
        name: subject
        type: string
      - description: read,write,update or delete
        in: path
        name: access
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - AccessToken: []
        ApiKey: []
      summary: Check acl
      tags:
      - acl
  /v1/acl/filter:
    post:
      consumes:
      - application/json
      description: Get acl by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-aclmodels_AclV2ListItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get acl by filter
      tags:
      - acl
  /v1/acl/migrate:
    get:
      consumes:
      - application/json
      description: Migrate acl
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Migrate acl
      tags:
      - acl
  /v1/acl/scopes:
    get:
      consumes:
      - application/json
      description: Get acl scopes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/aclmodels.Acl2Scope'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get acl scopes
      tags:
      - acl
  /v1/apikeys/{apikeyId}:
    delete:
      consumes:
      - application/json
      description: Delete a api key by id
      parameters:
      - description: apikeyId
        in: path
        name: apikeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete api key
      tags:
      - api keys
  /v1/apikeys/apikeys:
    post:
      consumes:
      - application/json
      description: Create a api key
      parameters:
      - description: Api key
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/apicontracts.ApiKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create api key
      tags:
      - apikeys
  /v1/apikeys/filter:
    post:
      consumes:
      - application/json
      description: Get apikeys by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_ApiKey'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get apikeys by filter
      tags:
      - api keys
  /v1/cluster/{clusterid}:
    get:
      consumes:
      - application/json
      description: Get a cluster by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Cluster'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get a cluster
      tags:
      - clusters
  /v1/cluster/{clusterid}/exists:
    get:
      consumes:
      - application/json
      description: Check if clusterId exists
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: ClusterId exists
      tags:
      - clusters
  /v1/cluster/{clusterid}/metadata:
    patch:
      consumes:
      - application/json
      description: Update cluster metadata
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update metadata
      tags:
      - clusters
  /v1/cluster/heartbeat:
    post:
      consumes:
      - application/json
      description: Registers a cluster heartbeat report
      parameters:
      - description: Heartbeat
        in: body
        name: heartbeat
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Register cluster heartbeat
      tags:
      - clusters
  /v1/clusters:
    post:
      consumes:
      - application/json
      description: Create a cluster
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create a cluster
      tags:
      - clusters
  /v1/clusters/:clusterid/views/compliancereports:
    get:
      consumes:
      - application/json
      description: A structured presentation of compliance reports
      parameters:
      - description: clusterid
        in: path
        name: clusterid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Compliance reports view
      tags:
      - clusters
  /v1/clusters/{clusterid}:
    get:
      consumes:
      - application/json
      description: Get a cluster by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Cluster'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get a cluster
      tags:
      - clusters
  /v1/clusters/{clusterid}/exists:
    get:
      consumes:
      - application/json
      description: Check if clusterId exists
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: ClusterId exists
      tags:
      - clusters
  /v1/clusters/{clusterid}/login:
    post:
      consumes:
      - application/json
      description: Get a kubeconfig by clusterId
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/apicontracts.KubeconfigCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.ClusterKubeconfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get kubeconfig for clusterId
      tags:
      - clusters
  /v1/clusters/{clusterid}/metadata:
    get:
      consumes:
      - application/json
      description: Get cluster metadata
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: get metadata
      tags:
      - clusters
    patch:
      consumes:
      - application/json
      description: Update cluster metadata
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update metadata
      tags:
      - clusters
  /v1/clusters/{clusterid}/views/applications:
    get:
      consumes:
      - application/json
      description: Just a dummy view
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: This is a dummy view
      tags:
      - clusters
  /v1/clusters/{clusterid}/views/ingresses:
    get:
      consumes:
      - application/json
      description: Just a dummy view
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: This is a dummy view
      tags:
      - clusters
  /v1/clusters/{clusterid}/views/nodes:
    get:
      consumes:
      - application/json
      description: Just a dummy view
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: This is a dummy view
      tags:
      - clusters
  /v1/clusters/{clusterid}/views/policyreports:
    get:
      consumes:
      - application/json
      description: A structured presentation of policyreports
      parameters:
      - description: type
        enum:
        - Unknown
        - Cluster
        - Policy
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Policy report view
      tags:
      - clusters
  /v1/clusters/{clusterid}/views/vulnerabilityreports:
    get:
      consumes:
      - application/json
      description: A structured presentation of vulnerability reports
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Vulnerability reports view
      tags:
      - clusters
  /v1/clusters/controlPlanesMetadata:
    get:
      consumes:
      - application/json
      description: Get cluster control planes metadata
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.ClusterControlPlaneMetadata'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: get control planes metadata
      tags:
      - clusters
  /v1/clusters/filter:
    post:
      consumes:
      - application/json
      description: Get clusters by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get clusters by filter
      tags:
      - clusters
  /v1/clusters/heartbeat:
    post:
      consumes:
      - application/json
      description: Registers a cluster heartbeat report
      parameters:
      - description: Heartbeat
        in: body
        name: heartbeat
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Register cluster heartbeat
      tags:
      - clusters
  /v1/clusters/self:
    get:
      consumes:
      - application/json
      description: Get cluster self data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get cluster self data
      tags:
      - clusters
  /v1/clusters/views/clusterlist:
    get:
      consumes:
      - application/json
      description: Just a dummy view
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: This is a dummy view
      tags:
      - clusters
  /v1/clusters/views/compliancereports:
    get:
      consumes:
      - application/json
      description: Shows a summary of trivy compliance reports per cluster categorized
        by amount failed or passed.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.ComplianceReport'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get compliance reports summary per cluster
      tags:
      - clusters
  /v1/clusters/views/errorlist:
    get:
      consumes:
      - application/json
      description: Just a dummy view
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: This is a dummy view
      tags:
      - clusters
  /v1/clusters/views/vulnerabilityreports:
    get:
      consumes:
      - application/json
      description: Shows a summary of trivy vulnerability reports per cluster categorized
        by amount of critical/high/medium/low vulnerabilities.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_NorskHelsenett_ror-api_internal_models_viewsmodels.VulnerabilityReportsView'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get vulnerability reports summary per cluster
      tags:
      - clusters
  /v1/clusters/views/vulnerabilityreports/byid:
    get:
      consumes:
      - application/json
      description: A structured presentation of vulnerability reports by CVE ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Vulnerability reports view by CVE ID
  /v1/clusters/views/vulnerabilityreports/byid/:cveid:
    get:
      consumes:
      - application/json
      description: A structured presentation of vulnerability reports
      parameters:
      - description: cveid
        in: path
        name: cveid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Vulnerability reports view
      tags:
      - clusters
  /v1/clusters/workspace/{workspaceId}/filter:
    get:
      consumes:
      - application/json
      description: Get clusters by workspace
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      - description: workspaceId
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Cluster'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get clusters by workspace
      tags:
      - clusters
  /v1/datacenters:
    get:
      consumes:
      - application/json
      description: Get datacenters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Datacenter'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get datacenters
      tags:
      - datacenters
    post:
      consumes:
      - application/json
      description: Create datacenter
      parameters:
      - description: Datacenter
        in: body
        name: datacenter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Datacenter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Datacenter'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create datacenter
      tags:
      - datacenters
  /v1/datacenters/{datacenterId}:
    put:
      consumes:
      - application/json
      description: Update a datacenter by id
      parameters:
      - description: datacenterId
        in: path
        name: datacenterId
        required: true
        type: string
      - description: Datacenter
        in: body
        name: datacenter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Datacenter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Datacenter'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update a datacenter
      tags:
      - datacenters
  /v1/datacenters/{datacenterName}:
    get:
      consumes:
      - application/json
      description: Get datacenter by name
      parameters:
      - description: datacenterName
        in: path
        name: datacenterName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Datacenter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get datacenter by name
      tags:
      - datacenters
  /v1/datacenters/id/{id}:
    get:
      consumes:
      - application/json
      description: Get datacenter by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Datacenter'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get datacenter by id
      tags:
      - datacenters
  /v1/desired_versions:
    get:
      consumes:
      - application/json
      description: Get all desired versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/apicontracts.DesiredVersion'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all desired versions
      tags:
      - desired_version
    post:
      consumes:
      - application/json
      description: Create a desired version
      parameters:
      - description: Add a desired version
        in: body
        name: version
        required: true
        schema:
          $ref: '#/definitions/apicontracts.DesiredVersion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create a desired version
      tags:
      - desired_version
  /v1/desired_versions/{key}:
    delete:
      consumes:
      - application/json
      description: Delete a desired version by it's key
      parameters:
      - description: key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a desired version by it's key
      tags:
      - desired_version
    get:
      consumes:
      - application/json
      description: Get a desired version by its name
      parameters:
      - description: key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.DesiredVersion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a desired version by its name
      tags:
      - desired_version
    put:
      consumes:
      - application/json
      description: Update a desired version by it's key
      parameters:
      - description: key
        in: path
        name: key
        required: true
        type: string
      - description: Update the desired version
        in: body
        name: version
        required: true
        schema:
          $ref: '#/definitions/apicontracts.DesiredVersion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update a desired version by it's key
      tags:
      - desired_version
  /v1/events/listen:
    get:
      consumes:
      - text/event-stream
      description: Listen to server sent events
      produces:
      - text/event-stream
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Server sent events
      tags:
      - events
  /v1/info/version:
    get:
      consumes:
      - application/json
      description: Get version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get version
      tags:
      - info
  /v1/metrics:
    get:
      consumes:
      - application/json
      description: Get metrics by user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricsTotal'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics by user
      tags:
      - metrics
    post:
      consumes:
      - application/json
      description: Register metrics
      parameters:
      - description: MetricsReport
        in: body
        name: metrics
        required: true
        schema:
          $ref: '#/definitions/apicontracts.MetricsReport'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricsTotal'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Register metrics
      tags:
      - metrics
  /v1/metrics/cluster/{clusterId}:
    get:
      consumes:
      - application/json
      description: Get metrics for clusterid
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricItem'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for clusterid
      tags:
      - metrics
  /v1/metrics/clusters:
    get:
      consumes:
      - application/json
      description: Get metrics for clusters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricList'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for clusters
      tags:
      - metrics
  /v1/metrics/clusters/workspace/{workspaceId}:
    get:
      consumes:
      - application/json
      description: Get metrics for clusters by workspace
      parameters:
      - description: workspaceId
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricList'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for clusters by workspace
      tags:
      - metrics
  /v1/metrics/custom/cluster/{property}:
    get:
      consumes:
      - application/json
      description: Get metrics for clusters by a property
      parameters:
      - description: property
        in: path
        name: property
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricsCustom'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for clusters by a property
      tags:
      - metrics
  /v1/metrics/datacenter/{datacenterName}:
    get:
      consumes:
      - application/json
      description: Get metrics for datacenter name
      parameters:
      - description: datacenterName
        in: path
        name: datacenterName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricItem'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for datacenter name
      tags:
      - metrics
  /v1/metrics/datacenters:
    get:
      consumes:
      - application/json
      description: Get metrics for datacenters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricList'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for datacenters
      tags:
      - metrics
  /v1/metrics/total:
    get:
      consumes:
      - application/json
      description: Get metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricsTotal'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics
      tags:
      - metrics
  /v1/metrics/workspace/{workspaceId}:
    get:
      consumes:
      - application/json
      description: Get metrics for workspace name
      parameters:
      - description: workspaceId
        in: path
        name: workspaceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for workspace name
      tags:
      - metrics
  /v1/metrics/workspaces/datacenter/{datacenterId}/filter:
    post:
      consumes:
      - application/json
      description: Get metrics for workspaces by datacenter name
      parameters:
      - description: datacenterId
        in: path
        name: datacenterId
        required: true
        type: string
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.MetricList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for workspaces by datacenter name
      tags:
      - metrics
  /v1/metrics/workspaces/filter:
    post:
      consumes:
      - application/json
      description: Get metrics for workspaces
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Metric'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get metrics for workspaces
      tags:
      - metrics
  /v1/operatorconfigs:
    get:
      consumes:
      - application/json
      description: Get all operator configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.OperatorConfig'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get all operator configs
      tags:
      - operatorconfigs
    post:
      consumes:
      - application/json
      description: Create a operator config
      parameters:
      - description: Add a operator config
        in: body
        name: operatorconfig
        required: true
        schema:
          $ref: '#/definitions/apicontracts.OperatorConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.OperatorConfig'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create a operator config
      tags:
      - operatorconfigs
  /v1/operatorconfigs/:id:
    delete:
      consumes:
      - application/json
      description: Delete a operator config by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a operator config
      tags:
      - operatorconfigs
    get:
      consumes:
      - application/json
      description: Get a operator config by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Get a operator config
        in: body
        name: operatorconfig
        required: true
        schema:
          $ref: '#/definitions/apicontracts.OperatorConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.OperatorConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get a operator config
      tags:
      - operatorconfigs
    put:
      consumes:
      - application/json
      description: Update a operator config by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update operator config
        in: body
        name: operatorconfig
        required: true
        schema:
          $ref: '#/definitions/apicontracts.OperatorConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.OperatorConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update a operator config
      tags:
      - operatorconfigs
  /v1/orders:
    get:
      consumes:
      - application/json
      description: Orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get orders
      tags:
      - orders
  /v1/orders/{uid}:
    delete:
      consumes:
      - application/json
      description: Orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a order by uid
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apiresourcecontracts.ResourceListClusterorders'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get order by uid
      tags:
      - orders
  /v1/orders/cluster:
    delete:
      consumes:
      - application/json
      description: Order a kubernetes cluster
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrderSpec'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Order deletion a kubernetes cluster
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Order a kubernetes cluster
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apiresourcecontracts.ResourceClusterOrderSpec'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Order a kubernetes cluster
      tags:
      - orders
  /v1/prices:
    get:
      consumes:
      - application/json
      description: Get all prices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Price'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get prices
      tags:
      - prices
    post:
      consumes:
      - application/json
      description: Create a price
      parameters:
      - description: Add a price
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Price'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create a price
      tags:
      - prices
  /v1/prices/:id:
    delete:
      consumes:
      - application/json
      description: Delete a price by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a price
      tags:
      - prices
    put:
      consumes:
      - application/json
      description: Update a price by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update price
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Price'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Price'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update a price
      tags:
      - prices
  /v1/prices/provider/{providerName}:
    get:
      consumes:
      - application/json
      description: Get prices by provider
      parameters:
      - description: providerName
        in: path
        name: providerName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Price'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get prices by provider
      tags:
      - prices
  /v1/projects:
    post:
      consumes:
      - application/json
      description: Create a project
      parameters:
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create project
      tags:
      - projects
  /v1/projects/{projectId}:
    delete:
      consumes:
      - application/json
      description: Delete a project by id
      parameters:
      - description: projectId
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get projects by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get projects by id
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update a project by id
      parameters:
      - description: projectId
        in: path
        name: projectId
        required: true
        type: string
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update project
      tags:
      - projects
  /v1/projects/{projectId}/clusters:
    get:
      consumes:
      - application/json
      description: Get clusters by projectid
      parameters:
      - description: projectId
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.ClusterInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get clusters by projectid
      tags:
      - projects
  /v1/projects/filter:
    get:
      consumes:
      - application/json
      description: Get projects by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get projects by filter
      tags:
      - projects
  /v1/providers:
    get:
      consumes:
      - application/json
      description: Get providers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/providermodels.Provider'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get providers
      tags:
      - providers
  /v1/providers/{providerType}/configs/params:
    get:
      consumes:
      - application/json
      description: Get supported kubernetes versions by provider
      parameters:
      - description: providerType
        in: path
        name: providerType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/providermodels.Provider'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get kuberntes versions by provider
      tags:
      - providers
  /v1/providers/{providerType}/kubernetes/versions:
    get:
      consumes:
      - application/json
      description: Get supported kubernetes versions by provider
      parameters:
      - description: providerType
        in: path
        name: providerType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/providermodels.Provider'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get kuberntes versions by provider
      tags:
      - providers
  /v1/resource/uid/{uid}:
    get:
      consumes:
      - application/json
      description: Get a resource by uid
      parameters:
      - description: The uid of the resource
        in: path
        name: uid
        required: true
        type: string
      - description: The kind of the owner, currently only support 'Cluster'
        enum:
        - UNKNOWN
        - ror
        - cluster
        - project
        - datacenter
        - virtualmachine
        in: query
        name: ownerScope
        required: true
        type: string
      - description: The name og the owner
        in: query
        name: ownerSubject
        required: true
        type: string
      - description: ApiVersion
        in: query
        name: apiversion
        required: true
        type: string
      - description: Kind
        in: query
        name: kind
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apiresourcecontracts.ResourceNode'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get resource
      tags:
      - resources
  /v1/resources:
    get:
      consumes:
      - application/json
      description: Get a list of resources
      parameters:
      - description: The kind of the owner, currently only support 'Cluster'
        enum:
        - UNKNOWN
        - ror
        - cluster
        - project
        - datacenter
        - virtualmachine
        in: query
        name: ownerScope
        required: true
        type: string
      - description: The name og the owner
        in: query
        name: ownerSubject
        required: true
        type: string
      - description: ApiVersion
        in: query
        name: apiversion
        required: true
        type: string
      - description: Kind
        in: query
        name: kind
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apiresourcecontracts.ResourceNode'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get resources
      tags:
      - resources
    post:
      consumes:
      - application/json
      description: Registers a  resource
      parameters:
      - description: ResourceUpdate
        in: body
        name: resourcereport
        required: true
        schema:
          $ref: '#/definitions/apiresourcecontracts.ResourceUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Register  resource
      tags:
      - resources
  /v1/resources/hashes:
    get:
      consumes:
      - application/json
      description: Get a resource list
      parameters:
      - description: The kind of the owner, currently only support 'Cluster'
        enum:
        - UNKNOWN
        - ror
        - cluster
        - project
        - datacenter
        - virtualmachine
        in: query
        name: ownerScope
        required: true
        type: string
      - description: The name og the owner
        in: query
        name: ownerSubject
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apiresourcecontracts.HashList'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get resource hash list
      tags:
      - resources
  /v1/resources/uid/{uid}:
    delete:
      consumes:
      - application/json
      description: Delete a resources
      parameters:
      - description: UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a resource by uid
      tags:
      - resources
    head:
      consumes:
      - application/json
      description: Get a list of cluster resources
      parameters:
      - description: The kind of the owner, currently only support 'Cluster'
        enum:
        - UNKNOWN
        - ror
        - cluster
        - project
        - datacenter
        - virtualmachine
        in: query
        name: ownerScope
        required: true
        type: string
      - description: The name og the owner
        in: query
        name: ownerSubject
        required: true
        type: string
      - description: UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Check cluster resource by uid
      tags:
      - resources
    put:
      consumes:
      - application/json
      description: Update a resources
      parameters:
      - description: UID
        in: path
        name: uid
        required: true
        type: string
      - description: ResourceUpdate
        in: body
        name: resourcereport
        required: true
        schema:
          $ref: '#/definitions/apiresourcecontracts.ResourceUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update resource by uid
      tags:
      - resources
  /v1/rulesets/{rulesetId}/resources:
    post:
      consumes:
      - application/json
      description: Append a resource onto the ruleset
      parameters:
      - description: rulesetId
        in: path
        name: rulesetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/messages.RulesetResourceModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Application:
        - write
        - admin
      summary: Add a resource onto the ruleset
      tags:
      - rulesetsController
  /v1/rulesets/{rulesetId}/resources/{resourceId}:
    delete:
      consumes:
      - application/json
      description: Delete a resource and all of its events.
      parameters:
      - description: rulesetId
        in: path
        name: rulesetId
        required: true
        type: string
      - description: resourceId
        in: path
        name: resourceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Application:
        - write
        - admin
      summary: Delete a resource
      tags:
      - rulesetsController
  /v1/rulesets/{rulesetId}/resources/{resourceId}/rules:
    post:
      consumes:
      - application/json
      description: Add a resource rule
      parameters:
      - description: rulesetId
        in: path
        name: rulesetId
        required: true
        type: string
      - description: resourceId
        in: path
        name: resourceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/messages.RulesetRuleModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Application:
        - write
        - admin
      summary: Add a resource rule
      tags:
      - rulesetsController
  /v1/rulesets/{rulesetId}/resources/{resourceId}/rules/{ruleId}:
    post:
      consumes:
      - application/json
      description: Add a resource rule
      parameters:
      - description: rulesetId
        in: path
        name: rulesetId
        required: true
        type: string
      - description: resourceId
        in: path
        name: resourceId
        required: true
        type: string
      - description: ruleId
        in: path
        name: ruleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Application:
        - write
        - admin
      summary: Add a resource rule
      tags:
      - rulesetsController
  /v1/rulesets/cluster/{clusterId}:
    get:
      consumes:
      - application/json
      description: Get ruleset by cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/messages.RulesetModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Application:
        - write
        - admin
      summary: Get ruleset by cluster
      tags:
      - rulesetsController
  /v1/rulesets/internal:
    get:
      consumes:
      - application/json
      description: Get the internal ruleset
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/messages.RulesetModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Application:
        - write
        - admin
      summary: Get internal ruleset
      tags:
      - rulesetsController
  /v1/tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a task
      parameters:
      - description: Add a task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create a task
      tags:
      - tasks
  /v1/tasks/:id:
    delete:
      consumes:
      - application/json
      description: Delete a task by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get a task by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Get a task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get a task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Update task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update a task
      tags:
      - tasks
  /v1/users/self:
    get:
      consumes:
      - application/json
      description: Get user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get user
      tags:
      - users
  /v1/users/self/apikeys:
    post:
      consumes:
      - application/json
      description: Create a api key
      parameters:
      - description: Api key
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/apicontracts.ApiKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create api key
      tags:
      - users
  /v1/users/self/apikeys/{apikeyId}:
    delete:
      consumes:
      - application/json
      description: Delete a api key by id for user
      parameters:
      - description: apikeyId
        in: path
        name: apikeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete api key for user
      tags:
      - user
  /v1/users/self/apikeys/filter:
    post:
      consumes:
      - application/json
      description: Get apikeys by filter
      parameters:
      - description: Filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/apicontracts.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.PaginatedResult-apicontracts_ApiKey'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get apikeys by filter
      tags:
      - users
  /v1/workspaces:
    get:
      consumes:
      - application/json
      description: Get workspaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apicontracts.Workspace'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "404":
          description: Not Found
          schema:
            items:
              $ref: '#/definitions/apicontracts.Workspace'
            type: array
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get workspaces
      tags:
      - workspaces
  /v1/workspaces/{workspaceName}:
    get:
      consumes:
      - application/json
      description: Get a workspace its name
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Workspace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get a workspace
      tags:
      - workspaces
  /v1/workspaces/{workspaceName}/login:
    post:
      consumes:
      - application/json
      description: Get a kubeconfig by workspace name.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/apicontracts.KubeconfigCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.ClusterKubeconfig'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get kubeconfig for workspace
      tags:
      - workspaces
  /v1/workspaces/id/{workspaceName}:
    get:
      consumes:
      - application/json
      description: Get a workspace its id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontracts.Workspace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get a workspace by id
      tags:
      - workspaces
  /v2/events/listen:
    get:
      consumes:
      - text/event-stream
      description: Listen to server sent events
      produces:
      - text/event-stream
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Server sent events
      tags:
      - events
  /v2/resource/uid/{uid}:
    get:
      consumes:
      - application/json
      description: Get a resource by uid
      parameters:
      - description: The uid of the resource
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rorresources.Resource'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get resource
      tags:
      - resources
  /v2/resources:
    get:
      consumes:
      - application/json
      description: Get a list of resources
      parameters:
      - description: A general query string (NOT IMPLEMENTED YET)
        in: query
        name: q
        type: string
      - description: The API version for the resource (e.g., 'v1' or 'apps/v1')
        in: query
        name: apiversion
        type: string
      - description: The kind of resource
        in: query
        name: kind
        type: string
      - description: 'JSON array of owner references [{''scope'': ''...'', ''subject'':
          ''...''}]'
        in: query
        name: ownerrefs
        type: string
      - description: Comma-separated list of UIDs
        in: query
        name: uids
        type: string
      - description: Comma-separated list of fields to include
        in: query
        name: fields
        type: string
      - description: Comma-separated list of fields to sort by (+field for ascending,
          -field for descending)
        in: query
        name: sort
        type: string
      - description: JSON array of filter objects [{'field':'field1','value':'value1','type':'string','operator':'eq'}]
        in: query
        name: filters
        type: string
      - description: Starting offset for pagination
        in: query
        name: offset
        type: integer
      - description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rorresources.ResourceSet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get resources
      tags:
      - resources
    post:
      consumes:
      - application/json
      description: Registers a  resource
      parameters:
      - description: ResourceUpdate
        in: body
        name: rorresource
        required: true
        schema:
          $ref: '#/definitions/rorresources.ResourceSet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Register  resource
      tags:
      - resources
  /v2/resources/hashes:
    get:
      consumes:
      - application/json
      description: Get a resource list
      parameters:
      - description: The kind of the owner, currently only support 'Cluster'
        enum:
        - UNKNOWN
        - ror
        - cluster
        - project
        - datacenter
        - virtualmachine
        in: query
        name: ownerScope
        required: true
        type: string
      - description: The name og the owner
        in: query
        name: ownerSubject
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apiresourcecontracts.HashList'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get resource hash list
      tags:
      - resources
  /v2/resources/uid/{uid}:
    delete:
      consumes:
      - application/json
      description: Delete a resources
      parameters:
      - description: UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete a resource by uid
      tags:
      - resources
    head:
      consumes:
      - application/json
      description: Get a list of cluster resources
      parameters:
      - description: The kind of the owner, currently only support 'Cluster'
        enum:
        - UNKNOWN
        - ror
        - cluster
        - project
        - datacenter
        - virtualmachine
        in: query
        name: ownerScope
        required: true
        type: string
      - description: The name og the owner
        in: query
        name: ownerSubject
        required: true
        type: string
      - description: UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Check cluster resource by uid
      tags:
      - resources
    put:
      consumes:
      - application/json
      description: Update a resources
      parameters:
      - description: UID
        in: path
        name: uid
        required: true
        type: string
      - description: ResourceUpdate
        in: body
        name: resourcereport
        required: true
        schema:
          $ref: '#/definitions/apiresourcecontracts.ResourceUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Update resource by uid
      tags:
      - resources
  /v2/self:
    get:
      consumes:
      - application/json
      description: Get user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontractsv2self.SelfData'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get self
      tags:
      - users
  /v2/self/apikeys:
    post:
      consumes:
      - application/json
      description: Create a api key
      parameters:
      - description: Api key
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/apicontractsv2self.CreateOrRenewApikeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apicontractsv2self.CreateOrRenewApikeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Create api key
      tags:
      - users
  /v2/self/apikeys/{apikeyId}:
    delete:
      consumes:
      - application/json
      description: Delete a api key by id for user
      parameters:
      - description: apikeyId
        in: path
        name: apikeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Delete api key for user
      tags:
      - user
  /v2/views:
    get:
      consumes:
      - application/json
      description: Get view
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apiview.ViewMetadata'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get view
      tags:
      - view
  /v2/views/{viewid}:
    get:
      consumes:
      - application/json
      description: Get view
      parameters:
      - description: The ID of the view to retrieve
        in: path
        name: viewid
        required: true
        type: string
      - description: Number of items to return, if set to -1, only metadata is returned
        in: query
        name: limit
        type: integer
      - description: Number of items to skip before starting to collect the result
          set
        in: query
        name: offset
        type: integer
      - description: Comma separated list of fields to sort by (e.g. name,-date)
        in: query
        name: sortby
        type: string
      - description: Filter expression (e.g. name==example*,date>2020-01-01)
        in: query
        name: filter
        type: string
      - description: Comma separated list of extra fields to include in the response
          (e.g. workorder,branch,testfield1)
        in: query
        name: extraFields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apiview.View'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rorerror.RorError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rorerror.RorError'
      security:
      - AccessToken: []
        ApiKey: []
      summary: Get view
      tags:
      - view
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
  ApiKey:
    in: header
    name: X-API-KEY
    type: apiKey
swagger: "2.0"
